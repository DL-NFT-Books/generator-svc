//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
//
// Package ps implements various functionalities needed for handling Postscript for PDF uses, in particular
// for PDF function type 4.
package ps ;import (_b "bufio";_d "bytes";_ce "errors";_cg "fmt";_ba "github.com/unidoc/unipdf/v3/common";_f "github.com/unidoc/unipdf/v3/core";_g "io";_e "math";);func (_dbc *PSOperand )add (_ac *PSStack )error {_af ,_add :=_ac .Pop ();if _add !=nil {return _add ;
};_ag ,_add :=_ac .Pop ();if _add !=nil {return _add ;};_cdb ,_feb :=_af .(*PSReal );_agc ,_ddb :=_af .(*PSInteger );if !_feb &&!_ddb {return ErrTypeCheck ;};_ffb ,_bad :=_ag .(*PSReal );_gebb ,_fbb :=_ag .(*PSInteger );if !_bad &&!_fbb {return ErrTypeCheck ;
};if _ddb &&_fbb {_dbd :=_agc .Val +_gebb .Val ;_bbc :=_ac .Push (MakeInteger (_dbd ));return _bbc ;};var _addb float64 ;if _feb {_addb =_cdb .Val ;}else {_addb =float64 (_agc .Val );};if _bad {_addb +=_ffb .Val ;}else {_addb +=float64 (_gebb .Val );};
_add =_ac .Push (MakeReal (_addb ));return _add ;};func (_efg *PSOperand )not (_bbb *PSStack )error {_aabc ,_accc :=_bbb .Pop ();if _accc !=nil {return _accc ;};if _eefe ,_cee :=_aabc .(*PSBoolean );_cee {_accc =_bbb .Push (MakeBool (!_eefe .Val ));return _accc ;
}else if _efea ,_bde :=_aabc .(*PSInteger );_bde {_accc =_bbb .Push (MakeInteger (^_efea .Val ));return _accc ;}else {return ErrTypeCheck ;};};func (_gac *PSOperand )idiv (_eega *PSStack )error {_gebg ,_cbdc :=_eega .Pop ();if _cbdc !=nil {return _cbdc ;
};_ced ,_cbdc :=_eega .Pop ();if _cbdc !=nil {return _cbdc ;};_aab ,_bce :=_gebg .(*PSInteger );if !_bce {return ErrTypeCheck ;};if _aab .Val ==0{return ErrUndefinedResult ;};_bda ,_bce :=_ced .(*PSInteger );if !_bce {return ErrTypeCheck ;};_ebcg :=_bda .Val /_aab .Val ;
_cbdc =_eega .Push (MakeInteger (_ebcg ));return _cbdc ;};func (_fg *PSInteger )String ()string {return _cg .Sprintf ("\u0025\u0064",_fg .Val )};

// PSProgram defines a Postscript program which is a series of PS objects (arguments, commands, programs etc).
type PSProgram []PSObject ;func (_bcbc *PSOperand )pop (_cec *PSStack )error {_ ,_bec :=_cec .Pop ();if _bec !=nil {return _bec ;};return nil ;};func (_fgb *PSParser )parseBool ()(*PSBoolean ,error ){_bffe ,_caaa :=_fgb ._ccdge .Peek (4);if _caaa !=nil {return MakeBool (false ),_caaa ;
};if (len (_bffe )>=4)&&(string (_bffe [:4])=="\u0074\u0072\u0075\u0065"){_fgb ._ccdge .Discard (4);return MakeBool (true ),nil ;};_bffe ,_caaa =_fgb ._ccdge .Peek (5);if _caaa !=nil {return MakeBool (false ),_caaa ;};if (len (_bffe )>=5)&&(string (_bffe [:5])=="\u0066\u0061\u006cs\u0065"){_fgb ._ccdge .Discard (5);
return MakeBool (false ),nil ;};return MakeBool (false ),_ce .New ("\u0075n\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u0062o\u006fl\u0065a\u006e\u0020\u0073\u0074\u0072\u0069\u006eg");};

// PSReal represents a real number.
type PSReal struct{Val float64 ;};func (_fge *PSReal )String ()string {return _cg .Sprintf ("\u0025\u002e\u0035\u0066",_fge .Val )};func (_ab *PSBoolean )String ()string {return _cg .Sprintf ("\u0025\u0076",_ab .Val )};

// Pop pops an object from the top of the stack.
func (_dea *PSStack )Pop ()(PSObject ,error ){if len (*_dea )< 1{return nil ,ErrStackUnderflow ;};_aceb :=(*_dea )[len (*_dea )-1];*_dea =(*_dea )[0:len (*_dea )-1];return _aceb ,nil ;};

// MakeInteger returns a new PSInteger object initialized with `val`.
func MakeInteger (val int )*PSInteger {_daa :=PSInteger {};_daa .Val =val ;return &_daa };var ErrStackOverflow =_ce .New ("\u0073\u0074\u0061\u0063\u006b\u0020\u006f\u0076\u0065r\u0066\u006c\u006f\u0077");func (_fedg *PSOperand )ifelse (_cbe *PSStack )error {_dfac ,_egd :=_cbe .Pop ();
if _egd !=nil {return _egd ;};_ecg ,_egd :=_cbe .Pop ();if _egd !=nil {return _egd ;};_dcbd ,_egd :=_cbe .Pop ();if _egd !=nil {return _egd ;};_agf ,_aaf :=_dfac .(*PSProgram );if !_aaf {return ErrTypeCheck ;};_dbef ,_aaf :=_ecg .(*PSProgram );if !_aaf {return ErrTypeCheck ;
};_fab ,_aaf :=_dcbd .(*PSBoolean );if !_aaf {return ErrTypeCheck ;};if _fab .Val {_agb :=_dbef .Exec (_cbe );return _agb ;};_egd =_agf .Exec (_cbe );return _egd ;};

// Append appends an object to the PSProgram.
func (_deba *PSProgram )Append (obj PSObject ){*_deba =append (*_deba ,obj )};func (_acf *PSOperand )ne (_ffe *PSStack )error {_aabf :=_acf .eq (_ffe );if _aabf !=nil {return _aabf ;};_aabf =_acf .not (_ffe );return _aabf ;};func (_ccfd *PSOperand )or (_aag *PSStack )error {_egdb ,_gagd :=_aag .Pop ();
if _gagd !=nil {return _gagd ;};_efge ,_gagd :=_aag .Pop ();if _gagd !=nil {return _gagd ;};if _adg ,_cbg :=_egdb .(*PSBoolean );_cbg {_fcba ,_deecb :=_efge .(*PSBoolean );if !_deecb {return ErrTypeCheck ;};_gagd =_aag .Push (MakeBool (_adg .Val ||_fcba .Val ));
return _gagd ;};if _gfc ,_fffg :=_egdb .(*PSInteger );_fffg {_eed ,_bege :=_efge .(*PSInteger );if !_bege {return ErrTypeCheck ;};_gagd =_aag .Push (MakeInteger (_gfc .Val |_eed .Val ));return _gagd ;};return ErrTypeCheck ;};func (_fa *PSProgram )String ()string {_ad :="\u007b\u0020";
for _ ,_bgg :=range *_fa {_ad +=_bgg .String ();_ad +="\u0020";};_ad +="\u007d";return _ad ;};

// PSBoolean represents a boolean value.
type PSBoolean struct{Val bool ;};

// NewPSStack returns an initialized PSStack.
func NewPSStack ()*PSStack {return &PSStack {}};func (_ffdg *PSOperand )mod (_cegf *PSStack )error {_gfb ,_gdg :=_cegf .Pop ();if _gdg !=nil {return _gdg ;};_ffbf ,_gdg :=_cegf .Pop ();if _gdg !=nil {return _gdg ;};_ea ,_ebec :=_gfb .(*PSInteger );if !_ebec {return ErrTypeCheck ;
};if _ea .Val ==0{return ErrUndefinedResult ;};_edf ,_ebec :=_ffbf .(*PSInteger );if !_ebec {return ErrTypeCheck ;};_cfcf :=_edf .Val %_ea .Val ;_gdg =_cegf .Push (MakeInteger (_cfcf ));return _gdg ;};func (_cd *PSProgram )Duplicate ()PSObject {_dbe :=&PSProgram {};
for _ ,_bb :=range *_cd {_dbe .Append (_bb .Duplicate ());};return _dbe ;};func (_gae *PSOperand )copy (_ece *PSStack )error {_efb ,_fba :=_ece .PopInteger ();if _fba !=nil {return _fba ;};if _efb < 0{return ErrRangeCheck ;};if _efb > len (*_ece ){return ErrRangeCheck ;
};*_ece =append (*_ece ,(*_ece )[len (*_ece )-_efb :]...);return nil ;};func (_dfd *PSOperand )exch (_aeg *PSStack )error {_bfa ,_acc :=_aeg .Pop ();if _acc !=nil {return _acc ;};_eef ,_acc :=_aeg .Pop ();if _acc !=nil {return _acc ;};_acc =_aeg .Push (_bfa );
if _acc !=nil {return _acc ;};_acc =_aeg .Push (_eef );return _acc ;};func (_cge *PSOperand )atan (_gf *PSStack )error {_bge ,_bcc :=_gf .PopNumberAsFloat64 ();if _bcc !=nil {return _bcc ;};_deg ,_bcc :=_gf .PopNumberAsFloat64 ();if _bcc !=nil {return _bcc ;
};if _bge ==0{var _ga error ;if _deg < 0{_ga =_gf .Push (MakeReal (270));}else {_ga =_gf .Push (MakeReal (90));};return _ga ;};_aef :=_deg /_bge ;_gge :=_e .Atan (_aef )*180/_e .Pi ;_bcc =_gf .Push (MakeReal (_gge ));return _bcc ;};func (_aae *PSOperand )div (_bdd *PSStack )error {_aad ,_gde :=_bdd .Pop ();
if _gde !=nil {return _gde ;};_bca ,_gde :=_bdd .Pop ();if _gde !=nil {return _gde ;};_bfc ,_fag :=_aad .(*PSReal );_dfa ,_eeg :=_aad .(*PSInteger );if !_fag &&!_eeg {return ErrTypeCheck ;};if _fag &&_bfc .Val ==0{return ErrUndefinedResult ;};if _eeg &&_dfa .Val ==0{return ErrUndefinedResult ;
};_dfe ,_cbb :=_bca .(*PSReal );_bed ,_bfcg :=_bca .(*PSInteger );if !_cbb &&!_bfcg {return ErrTypeCheck ;};var _gee float64 ;if _cbb {_gee =_dfe .Val ;}else {_gee =float64 (_bed .Val );};if _fag {_gee /=_bfc .Val ;}else {_gee /=float64 (_dfa .Val );};
_gde =_bdd .Push (MakeReal (_gee ));return _gde ;};func (_gcc *PSProgram )DebugString ()string {_fd :="\u007b\u0020";for _ ,_aa :=range *_gcc {_fd +=_aa .DebugString ();_fd +="\u0020";};_fd +="\u007d";return _fd ;};func (_daeb *PSOperand )roll (_egg *PSStack )error {_fga ,_eddd :=_egg .Pop ();
if _eddd !=nil {return _eddd ;};_cdba ,_eddd :=_egg .Pop ();if _eddd !=nil {return _eddd ;};_cadb ,_bggc :=_fga .(*PSInteger );if !_bggc {return ErrTypeCheck ;};_bdb ,_bggc :=_cdba .(*PSInteger );if !_bggc {return ErrTypeCheck ;};if _bdb .Val < 0{return ErrRangeCheck ;
};if _bdb .Val ==0||_bdb .Val ==1{return nil ;};if _bdb .Val > len (*_egg ){return ErrStackUnderflow ;};for _faf :=0;_faf < _bdf (_cadb .Val );_faf ++{var _egfe []PSObject ;_egfe =(*_egg )[len (*_egg )-(_bdb .Val ):len (*_egg )];if _cadb .Val > 0{_bcd :=_egfe [len (_egfe )-1];
_egfe =append ([]PSObject {_bcd },_egfe [0:len (_egfe )-1]...);}else {_egfa :=_egfe [len (_egfe )-_bdb .Val ];_egfe =append (_egfe [1:],_egfa );};_feee :=append ((*_egg )[0:len (*_egg )-_bdb .Val ],_egfe ...);_egg =&_feee ;};return nil ;};

// DebugString returns a descriptive string representation of the stack - intended for debugging.
func (_bcdd *PSStack )DebugString ()string {_gfgb :="\u005b\u0020";for _ ,_cecc :=range *_bcdd {_gfgb +=_cecc .DebugString ();_gfgb +="\u0020";};_gfgb +="\u005d";return _gfgb ;};func (_bd *PSOperand )cvr (_fbc *PSStack )error {_dcd ,_ffc :=_fbc .Pop ();
if _ffc !=nil {return _ffc ;};if _bea ,_dac :=_dcd .(*PSReal );_dac {_ffc =_fbc .Push (MakeReal (_bea .Val ));}else if _aca ,_feg :=_dcd .(*PSInteger );_feg {_ffc =_fbc .Push (MakeReal (float64 (_aca .Val )));}else {return ErrTypeCheck ;};return _ffc ;
};

// Exec executes the operand `op` in the state specified by `stack`.
func (_cba *PSOperand )Exec (stack *PSStack )error {_bcf :=ErrUnsupportedOperand ;switch *_cba {case "\u0061\u0062\u0073":_bcf =_cba .abs (stack );case "\u0061\u0064\u0064":_bcf =_cba .add (stack );case "\u0061\u006e\u0064":_bcf =_cba .and (stack );case "\u0061\u0074\u0061\u006e":_bcf =_cba .atan (stack );
case "\u0062\u0069\u0074\u0073\u0068\u0069\u0066\u0074":_bcf =_cba .bitshift (stack );case "\u0063e\u0069\u006c\u0069\u006e\u0067":_bcf =_cba .ceiling (stack );case "\u0063\u006f\u0070\u0079":_bcf =_cba .copy (stack );case "\u0063\u006f\u0073":_bcf =_cba .cos (stack );
case "\u0063\u0076\u0069":_bcf =_cba .cvi (stack );case "\u0063\u0076\u0072":_bcf =_cba .cvr (stack );case "\u0064\u0069\u0076":_bcf =_cba .div (stack );case "\u0064\u0075\u0070":_bcf =_cba .dup (stack );case "\u0065\u0071":_bcf =_cba .eq (stack );case "\u0065\u0078\u0063\u0068":_bcf =_cba .exch (stack );
case "\u0065\u0078\u0070":_bcf =_cba .exp (stack );case "\u0066\u006c\u006fo\u0072":_bcf =_cba .floor (stack );case "\u0067\u0065":_bcf =_cba .ge (stack );case "\u0067\u0074":_bcf =_cba .gt (stack );case "\u0069\u0064\u0069\u0076":_bcf =_cba .idiv (stack );
case "\u0069\u0066":_bcf =_cba .ifCondition (stack );case "\u0069\u0066\u0065\u006c\u0073\u0065":_bcf =_cba .ifelse (stack );case "\u0069\u006e\u0064e\u0078":_bcf =_cba .index (stack );case "\u006c\u0065":_bcf =_cba .le (stack );case "\u006c\u006f\u0067":_bcf =_cba .log (stack );
case "\u006c\u006e":_bcf =_cba .ln (stack );case "\u006c\u0074":_bcf =_cba .lt (stack );case "\u006d\u006f\u0064":_bcf =_cba .mod (stack );case "\u006d\u0075\u006c":_bcf =_cba .mul (stack );case "\u006e\u0065":_bcf =_cba .ne (stack );case "\u006e\u0065\u0067":_bcf =_cba .neg (stack );
case "\u006e\u006f\u0074":_bcf =_cba .not (stack );case "\u006f\u0072":_bcf =_cba .or (stack );case "\u0070\u006f\u0070":_bcf =_cba .pop (stack );case "\u0072\u006f\u0075n\u0064":_bcf =_cba .round (stack );case "\u0072\u006f\u006c\u006c":_bcf =_cba .roll (stack );
case "\u0073\u0069\u006e":_bcf =_cba .sin (stack );case "\u0073\u0071\u0072\u0074":_bcf =_cba .sqrt (stack );case "\u0073\u0075\u0062":_bcf =_cba .sub (stack );case "\u0074\u0072\u0075\u006e\u0063\u0061\u0074\u0065":_bcf =_cba .truncate (stack );case "\u0078\u006f\u0072":_bcf =_cba .xor (stack );
};return _bcf ;};var ErrUnsupportedOperand =_ce .New ("\u0075\u006e\u0073\u0075pp\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064");func (_aafc *PSOperand )ln (_gfg *PSStack )error {_edc ,_ada :=_gfg .PopNumberAsFloat64 ();
if _ada !=nil {return _ada ;};_fac :=_e .Log (_edc );_ada =_gfg .Push (MakeReal (_fac ));return _ada ;};

// NewPSExecutor returns an initialized PSExecutor for an input `program`.
func NewPSExecutor (program *PSProgram )*PSExecutor {_ge :=&PSExecutor {};_ge .Stack =NewPSStack ();_ge ._bg =program ;return _ge ;};var ErrStackUnderflow =_ce .New ("\u0073t\u0061c\u006b\u0020\u0075\u006e\u0064\u0065\u0072\u0066\u006c\u006f\u0077");func (_bcb *PSOperand )dup (_gec *PSStack )error {_eea ,_fcbb :=_gec .Pop ();
if _fcbb !=nil {return _fcbb ;};_fcbb =_gec .Push (_eea );if _fcbb !=nil {return _fcbb ;};_fcbb =_gec .Push (_eea .Duplicate ());return _fcbb ;};func (_ddab *PSParser )parseFunction ()(*PSProgram ,error ){_fgd ,_ :=_ddab ._ccdge .ReadByte ();if _fgd !='{'{return nil ,_ce .New ("\u0069\u006ev\u0061\u006c\u0069d\u0020\u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");
};_ccad :=NewPSProgram ();for {_ddab .skipSpaces ();_fgff ,_ddg :=_ddab ._ccdge .Peek (2);if _ddg !=nil {if _ddg ==_g .EOF {break ;};return nil ,_ddg ;};_ba .Log .Trace ("\u0050e\u0065k\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u003a\u0020\u0025\u0073",string (_fgff ));
if _fgff [0]=='}'{_ba .Log .Trace ("\u0045\u004f\u0046 \u0066\u0075\u006e\u0063\u0074\u0069\u006f\u006e");_ddab ._ccdge .ReadByte ();break ;}else if _fgff [0]=='{'{_ba .Log .Trace ("\u0046u\u006e\u0063\u0074\u0069\u006f\u006e!");_adab ,_cebb :=_ddab .parseFunction ();
if _cebb !=nil {return nil ,_cebb ;};_ccad .Append (_adab );}else if _f .IsDecimalDigit (_fgff [0])||(_fgff [0]=='-'&&_f .IsDecimalDigit (_fgff [1])){_ba .Log .Trace ("\u002d>\u004e\u0075\u006d\u0062\u0065\u0072!");_eegb ,_gbg :=_ddab .parseNumber ();if _gbg !=nil {return nil ,_gbg ;
};_ccad .Append (_eegb );}else {_ba .Log .Trace ("\u002d>\u004fp\u0065\u0072\u0061\u006e\u0064 \u006f\u0072 \u0062\u006f\u006f\u006c\u003f");_fgff ,_ =_ddab ._ccdge .Peek (5);_deeg :=string (_fgff );_ba .Log .Trace ("\u0050\u0065\u0065k\u0020\u0073\u0074\u0072\u003a\u0020\u0025\u0073",_deeg );
if (len (_deeg )> 4)&&(_deeg [:5]=="\u0066\u0061\u006cs\u0065"){_age ,_cfcd :=_ddab .parseBool ();if _cfcd !=nil {return nil ,_cfcd ;};_ccad .Append (_age );}else if (len (_deeg )> 3)&&(_deeg [:4]=="\u0074\u0072\u0075\u0065"){_bcfc ,_aeae :=_ddab .parseBool ();
if _aeae !=nil {return nil ,_aeae ;};_ccad .Append (_bcfc );}else {_ddec ,_bffg :=_ddab .parseOperand ();if _bffg !=nil {return nil ,_bffg ;};_ccad .Append (_ddec );};};};return _ccad ,nil ;};

// MakeOperand returns a new PSOperand object based on string `val`.
func MakeOperand (val string )*PSOperand {_bcga :=PSOperand (val );return &_bcga };

// MakeBool returns a new PSBoolean object initialized with `val`.
func MakeBool (val bool )*PSBoolean {_bbced :=PSBoolean {};_bbced .Val =val ;return &_bbced };

// Push pushes an object on top of the stack.
func (_fadd *PSStack )Push (obj PSObject )error {if len (*_fadd )> 100{return ErrStackOverflow ;};*_fadd =append (*_fadd ,obj );return nil ;};func (_ebab *PSOperand )xor (_eddg *PSStack )error {_cade ,_geee :=_eddg .Pop ();if _geee !=nil {return _geee ;
};_ccdg ,_geee :=_eddg .Pop ();if _geee !=nil {return _geee ;};if _cbgd ,_aeca :=_cade .(*PSBoolean );_aeca {_bbgeg ,_fabb :=_ccdg .(*PSBoolean );if !_fabb {return ErrTypeCheck ;};_geee =_eddg .Push (MakeBool (_cbgd .Val !=_bbgeg .Val ));return _geee ;
};if _cdcb ,_fbfc :=_cade .(*PSInteger );_fbfc {_ffdgc ,_afa :=_ccdg .(*PSInteger );if !_afa {return ErrTypeCheck ;};_geee =_eddg .Push (MakeInteger (_cdcb .Val ^_ffdgc .Val ));return _geee ;};return ErrTypeCheck ;};

// PSParser is a basic Postscript parser.
type PSParser struct{_ccdge *_b .Reader };func (_dcda *PSOperand )sub (_gaf *PSStack )error {_bbd ,_fcec :=_gaf .Pop ();if _fcec !=nil {return _fcec ;};_gfe ,_fcec :=_gaf .Pop ();if _fcec !=nil {return _fcec ;};_fcbd ,_fgc :=_bbd .(*PSReal );_dfg ,_efc :=_bbd .(*PSInteger );
if !_fgc &&!_efc {return ErrTypeCheck ;};_abc ,_bfaa :=_gfe .(*PSReal );_eff ,_gedb :=_gfe .(*PSInteger );if !_bfaa &&!_gedb {return ErrTypeCheck ;};if _efc &&_gedb {_gea :=_eff .Val -_dfg .Val ;_egb :=_gaf .Push (MakeInteger (_gea ));return _egb ;};var _afeg float64 =0;
if _bfaa {_afeg =_abc .Val ;}else {_afeg =float64 (_eff .Val );};if _fgc {_afeg -=_fcbd .Val ;}else {_afeg -=float64 (_dfg .Val );};_fcec =_gaf .Push (MakeReal (_afeg ));return _fcec ;};func (_aeb *PSOperand )cos (_gcfb *PSStack )error {_aaa ,_fgf :=_gcfb .PopNumberAsFloat64 ();
if _fgf !=nil {return _fgf ;};_fed :=_e .Cos (_aaa *_e .Pi /180.0);_fgf =_gcfb .Push (MakeReal (_fed ));return _fgf ;};

// PSStack defines a stack of PSObjects. PSObjects can be pushed on or pull from the stack.
type PSStack []PSObject ;func (_eg *PSReal )Duplicate ()PSObject {_gc :=PSReal {};_gc .Val =_eg .Val ;return &_gc };

// Exec executes the program, typically leaving output values on the stack.
func (_fgg *PSProgram )Exec (stack *PSStack )error {for _ ,_ec :=range *_fgg {var _cca error ;switch _ggb :=_ec .(type ){case *PSInteger :_bgd :=_ggb ;_cca =stack .Push (_bgd );case *PSReal :_ae :=_ggb ;_cca =stack .Push (_ae );case *PSBoolean :_dc :=_ggb ;
_cca =stack .Push (_dc );case *PSProgram :_edd :=_ggb ;_cca =stack .Push (_edd );case *PSOperand :_dcb :=_ggb ;_cca =_dcb .Exec (stack );default:return ErrTypeCheck ;};if _cca !=nil {return _cca ;};};return nil ;};func (_eee *PSOperand )cvi (_cde *PSStack )error {_gag ,_gcef :=_cde .Pop ();
if _gcef !=nil {return _gcef ;};if _cgd ,_fc :=_gag .(*PSReal );_fc {_fdg :=int (_cgd .Val );_gcef =_cde .Push (MakeInteger (_fdg ));}else if _bfg ,_ddf :=_gag .(*PSInteger );_ddf {_fcb :=_bfg .Val ;_gcef =_cde .Push (MakeInteger (_fcb ));}else {return ErrTypeCheck ;
};return _gcef ;};

// PSInteger represents an integer.
type PSInteger struct{Val int ;};func (_cff *PSOperand )and (_dba *PSStack )error {_gd ,_bcff :=_dba .Pop ();if _bcff !=nil {return _bcff ;};_ddc ,_bcff :=_dba .Pop ();if _bcff !=nil {return _bcff ;};if _dcg ,_fda :=_gd .(*PSBoolean );_fda {_bab ,_ggcf :=_ddc .(*PSBoolean );
if !_ggcf {return ErrTypeCheck ;};_bcff =_dba .Push (MakeBool (_dcg .Val &&_bab .Val ));return _bcff ;};if _deec ,_fef :=_gd .(*PSInteger );_fef {_cfe ,_fec :=_ddc .(*PSInteger );if !_fec {return ErrTypeCheck ;};_bcff =_dba .Push (MakeInteger (_deec .Val &_cfe .Val ));
return _bcff ;};return ErrTypeCheck ;};func (_ee *PSOperand )bitshift (_ddbb *PSStack )error {_ecd ,_cfc :=_ddbb .PopInteger ();if _cfc !=nil {return _cfc ;};_cfb ,_cfc :=_ddbb .PopInteger ();if _cfc !=nil {return _cfc ;};var _ebg int ;if _ecd >=0{_ebg =_cfb <<uint (_ecd );
}else {_ebg =_cfb >>uint (-_ecd );};_cfc =_ddbb .Push (MakeInteger (_ebg ));return _cfc ;};func (_ega *PSOperand )String ()string {return string (*_ega )};func (_gaa *PSOperand )eq (_bef *PSStack )error {_cfd ,_agcd :=_bef .Pop ();if _agcd !=nil {return _agcd ;
};_fdd ,_agcd :=_bef .Pop ();if _agcd !=nil {return _agcd ;};_cfce ,_gga :=_cfd .(*PSBoolean );_addbe ,_cbd :=_fdd .(*PSBoolean );if _gga ||_cbd {var _gfd error ;if _gga &&_cbd {_gfd =_bef .Push (MakeBool (_cfce .Val ==_addbe .Val ));}else {_gfd =_bef .Push (MakeBool (false ));
};return _gfd ;};var _dde float64 ;var _bbg float64 ;if _cdd ,_eec :=_cfd .(*PSInteger );_eec {_dde =float64 (_cdd .Val );}else if _eegc ,_ecc :=_cfd .(*PSReal );_ecc {_dde =_eegc .Val ;}else {return ErrTypeCheck ;};if _fce ,_gdd :=_fdd .(*PSInteger );
_gdd {_bbg =float64 (_fce .Val );}else if _gbd ,_gcg :=_fdd .(*PSReal );_gcg {_bbg =_gbd .Val ;}else {return ErrTypeCheck ;};if _e .Abs (_bbg -_dde )< _eb {_agcd =_bef .Push (MakeBool (true ));}else {_agcd =_bef .Push (MakeBool (false ));};return _agcd ;
};func (_fff *PSOperand )log (_bgb *PSStack )error {_ace ,_dae :=_bgb .PopNumberAsFloat64 ();if _dae !=nil {return _dae ;};_bae :=_e .Log10 (_ace );_dae =_bgb .Push (MakeReal (_bae ));return _dae ;};

// NewPSParser returns a new instance of the PDF Postscript parser from input data.
func NewPSParser (content []byte )*PSParser {_eaad :=PSParser {};_bee :=_d .NewBuffer (content );_eaad ._ccdge =_b .NewReader (_bee );return &_eaad ;};func (_gb *PSInteger )Duplicate ()PSObject {_df :=PSInteger {};_df .Val =_gb .Val ;return &_df };func (_gca *PSOperand )sqrt (_fade *PSStack )error {_dgd ,_dcdg :=_fade .PopNumberAsFloat64 ();
if _dcdg !=nil {return _dcdg ;};if _dgd < 0{return ErrRangeCheck ;};_agbe :=_e .Sqrt (_dgd );_dcdg =_fade .Push (MakeReal (_agbe ));return _dcdg ;};func (_fgef *PSParser )skipSpaces ()(int ,error ){_fae :=0;for {_badg ,_aeed :=_fgef ._ccdge .Peek (1);if _aeed !=nil {return 0,_aeed ;
};if _f .IsWhiteSpace (_badg [0]){_fgef ._ccdge .ReadByte ();_fae ++;}else {break ;};};return _fae ,nil ;};var ErrUndefinedResult =_ce .New ("\u0075\u006e\u0064\u0065fi\u006e\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0065\u0072\u0072o\u0072");


// PopNumberAsFloat64 pops and return the numeric value of the top of the stack as a float64.
// Real or integer only.
func (_gabg *PSStack )PopNumberAsFloat64 ()(float64 ,error ){_dgbb ,_eac :=_gabg .Pop ();if _eac !=nil {return 0,_eac ;};if _ceee ,_ebdf :=_dgbb .(*PSReal );_ebdf {return _ceee .Val ,nil ;}else if _aecg ,_ecb :=_dgbb .(*PSInteger );_ecb {return float64 (_aecg .Val ),nil ;
}else {return 0,ErrTypeCheck ;};};func (_fcdg *PSOperand )mul (_dcf *PSStack )error {_feec ,_aec :=_dcf .Pop ();if _aec !=nil {return _aec ;};_beg ,_aec :=_dcf .Pop ();if _aec !=nil {return _aec ;};_fcbc ,_cdc :=_feec .(*PSReal );_dcc ,_cbbc :=_feec .(*PSInteger );
if !_cdc &&!_cbbc {return ErrTypeCheck ;};_fffe ,_ddbg :=_beg .(*PSReal );_dbee ,_eded :=_beg .(*PSInteger );if !_ddbg &&!_eded {return ErrTypeCheck ;};if _cbbc &&_eded {_dca :=_dcc .Val *_dbee .Val ;_baa :=_dcf .Push (MakeInteger (_dca ));return _baa ;
};var _feeb float64 ;if _cdc {_feeb =_fcbc .Val ;}else {_feeb =float64 (_dcc .Val );};if _ddbg {_feeb *=_fffe .Val ;}else {_feeb *=float64 (_dbee .Val );};_aec =_dcf .Push (MakeReal (_feeb ));return _aec ;};func (_cc *PSInteger )DebugString ()string {return _cg .Sprintf ("\u0069\u006e\u0074\u003a\u0025\u0064",_cc .Val );
};func (_gcge *PSOperand )sin (_dcge *PSStack )error {_aed ,_eaa :=_dcge .PopNumberAsFloat64 ();if _eaa !=nil {return _eaa ;};_ffef :=_e .Sin (_aed *_e .Pi /180.0);_eaa =_dcge .Push (MakeReal (_ffef ));return _eaa ;};func _bdf (_bdbg int )int {if _bdbg < 0{return -_bdbg ;
};return _bdbg ;};

// PSOperand represents a Postscript operand (text string).
type PSOperand string ;func (_fee *PSOperand )le (_dgf *PSStack )error {_bac ,_gedaf :=_dgf .PopNumberAsFloat64 ();if _gedaf !=nil {return _gedaf ;};_fcc ,_gedaf :=_dgf .PopNumberAsFloat64 ();if _gedaf !=nil {return _gedaf ;};if _e .Abs (_fcc -_bac )< _eb {_dege :=_dgf .Push (MakeBool (true ));
return _dege ;}else if _fcc < _bac {_accb :=_dgf .Push (MakeBool (true ));return _accb ;}else {_bgde :=_dgf .Push (MakeBool (false ));return _bgde ;};};func (_gaga *PSOperand )neg (_gdab *PSStack )error {_fbd ,_bggd :=_gdab .Pop ();if _bggd !=nil {return _bggd ;
};if _ded ,_ceb :=_fbd .(*PSReal );_ceb {_bggd =_gdab .Push (MakeReal (-_ded .Val ));return _bggd ;}else if _egfb ,_cfff :=_fbd .(*PSInteger );_cfff {_bggd =_gdab .Push (MakeInteger (-_egfb .Val ));return _bggd ;}else {return ErrTypeCheck ;};};func (_fbf *PSOperand )ifCondition (_aabe *PSStack )error {_cdf ,_efee :=_aabe .Pop ();
if _efee !=nil {return _efee ;};_bbf ,_efee :=_aabe .Pop ();if _efee !=nil {return _efee ;};_ccf ,_acg :=_cdf .(*PSProgram );if !_acg {return ErrTypeCheck ;};_bcge ,_acg :=_bbf .(*PSBoolean );if !_acg {return ErrTypeCheck ;};if _bcge .Val {_cac :=_ccf .Exec (_aabe );
return _cac ;};return nil ;};

// PSExecutor has its own execution stack and is used to executre a PS routine (program).
type PSExecutor struct{Stack *PSStack ;_bg *PSProgram ;};func (_fe *PSOperand )Duplicate ()PSObject {_dd :=*_fe ;return &_dd };func (_afe *PSOperand )ceiling (_afd *PSStack )error {_be ,_dfb :=_afd .Pop ();if _dfb !=nil {return _dfb ;};if _gce ,_fbbf :=_be .(*PSReal );
_fbbf {_dfb =_afd .Push (MakeReal (_e .Ceil (_gce .Val )));}else if _def ,_ebe :=_be .(*PSInteger );_ebe {_dfb =_afd .Push (MakeInteger (_def .Val ));}else {_dfb =ErrTypeCheck ;};return _dfb ;};func (_de *PSReal )DebugString ()string {return _cg .Sprintf ("\u0072e\u0061\u006c\u003a\u0025\u002e\u0035f",_de .Val );
};const _eb =0.000001;func (_baf *PSOperand )floor (_dg *PSStack )error {_bcg ,_degb :=_dg .Pop ();if _degb !=nil {return _degb ;};if _efe ,_gab :=_bcg .(*PSReal );_gab {_degb =_dg .Push (MakeReal (_e .Floor (_efe .Val )));}else if _dbcd ,_cce :=_bcg .(*PSInteger );
_cce {_degb =_dg .Push (MakeInteger (_dbcd .Val ));}else {return ErrTypeCheck ;};return _degb ;};func (_bbe *PSOperand )abs (_geb *PSStack )error {_cf ,_cbc :=_geb .Pop ();if _cbc !=nil {return _cbc ;};if _cea ,_gcf :=_cf .(*PSReal );_gcf {_ggc :=_cea .Val ;
if _ggc < 0{_cbc =_geb .Push (MakeReal (-_ggc ));}else {_cbc =_geb .Push (MakeReal (_ggc ));};}else if _ddd ,_dbf :=_cf .(*PSInteger );_dbf {_fb :=_ddd .Val ;if _fb < 0{_cbc =_geb .Push (MakeInteger (-_fb ));}else {_cbc =_geb .Push (MakeInteger (_fb ));
};}else {return ErrTypeCheck ;};return _cbc ;};func (_cab *PSOperand )index (_beaf *PSStack )error {_ede ,_gff :=_beaf .Pop ();if _gff !=nil {return _gff ;};_cag ,_cad :=_ede .(*PSInteger );if !_cad {return ErrTypeCheck ;};if _cag .Val < 0{return ErrRangeCheck ;
};if _cag .Val > len (*_beaf )-1{return ErrStackUnderflow ;};_gda :=(*_beaf )[len (*_beaf )-1-_cag .Val ];_gff =_beaf .Push (_gda .Duplicate ());return _gff ;};

// PopInteger specificially pops an integer from the top of the stack, returning the value as an int.
func (_gef *PSStack )PopInteger ()(int ,error ){_acag ,_dag :=_gef .Pop ();if _dag !=nil {return 0,_dag ;};if _adb ,_gdc :=_acag .(*PSInteger );_gdc {return _adb .Val ,nil ;};return 0,ErrTypeCheck ;};

// Execute executes the program for an input parameters `objects` and returns a slice of output objects.
func (_ebc *PSExecutor )Execute (objects []PSObject )([]PSObject ,error ){for _ ,_db :=range objects {_cegb :=_ebc .Stack .Push (_db );if _cegb !=nil {return nil ,_cegb ;};};_ffd :=_ebc ._bg .Exec (_ebc .Stack );if _ffd !=nil {_ba .Log .Debug ("\u0045x\u0065c\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_ffd );
return nil ,_ffd ;};_cb :=[]PSObject (*_ebc .Stack );_ebc .Stack .Empty ();return _cb ,nil ;};func (_deb *PSBoolean )Duplicate ()PSObject {_ged :=PSBoolean {};_ged .Val =_deb .Val ;return &_ged };func (_ebd *PSOperand )ge (_dad *PSStack )error {_ggd ,_egf :=_dad .PopNumberAsFloat64 ();
if _egf !=nil {return _egf ;};_gcce ,_egf :=_dad .PopNumberAsFloat64 ();if _egf !=nil {return _egf ;};if _e .Abs (_gcce -_ggd )< _eb {_cbac :=_dad .Push (MakeBool (true ));return _cbac ;}else if _gcce > _ggd {_ggea :=_dad .Push (MakeBool (true ));return _ggea ;
}else {_cbf :=_dad .Push (MakeBool (false ));return _cbf ;};};func (_gagg *PSParser )parseNumber ()(PSObject ,error ){_dfbg ,_aeda :=_f .ParseNumber (_gagg ._ccdge );if _aeda !=nil {return nil ,_aeda ;};switch _fdf :=_dfbg .(type ){case *_f .PdfObjectFloat :return MakeReal (float64 (*_fdf )),nil ;
case *_f .PdfObjectInteger :return MakeInteger (int (*_fdf )),nil ;};return nil ,_cg .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_dfbg );};func (_bbge *PSOperand )lt (_dgg *PSStack )error {_dgb ,_bbce :=_dgg .PopNumberAsFloat64 ();
if _bbce !=nil {return _bbce ;};_bff ,_bbce :=_dgg .PopNumberAsFloat64 ();if _bbce !=nil {return _bbce ;};if _e .Abs (_bff -_dgb )< _eb {_aea :=_dgg .Push (MakeBool (false ));return _aea ;}else if _bff < _dgb {_fdgg :=_dgg .Push (MakeBool (true ));return _fdgg ;
}else {_afb :=_dgg .Push (MakeBool (false ));return _afb ;};};

// NewPSProgram returns an empty, initialized PSProgram.
func NewPSProgram ()*PSProgram {return &PSProgram {}};func (_cfcb *PSParser )parseOperand ()(*PSOperand ,error ){var _bacc []byte ;for {_fgefg ,_cdfd :=_cfcb ._ccdge .Peek (1);if _cdfd !=nil {if _cdfd ==_g .EOF {break ;};return nil ,_cdfd ;};if _f .IsDelimiter (_fgefg [0]){break ;
};if _f .IsWhiteSpace (_fgefg [0]){break ;};_fgeg ,_ :=_cfcb ._ccdge .ReadByte ();_bacc =append (_bacc ,_fgeg );};if len (_bacc )==0{return nil ,_ce .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};return MakeOperand (string (_bacc )),nil ;};

// String returns a string representation of the stack.
func (_ggg *PSStack )String ()string {_ebb :="\u005b\u0020";for _ ,_fdfa :=range *_ggg {_ebb +=_fdfa .String ();_ebb +="\u0020";};_ebb +="\u005d";return _ebb ;};func (_ed *PSBoolean )DebugString ()string {return _cg .Sprintf ("\u0062o\u006f\u006c\u003a\u0025\u0076",_ed .Val );
};

// Empty empties the stack.
func (_dbff *PSStack )Empty (){*_dbff =[]PSObject {}};func (_feea *PSOperand )truncate (_dda *PSStack )error {_ccd ,_aafg :=_dda .Pop ();if _aafg !=nil {return _aafg ;};if _gfa ,_bddc :=_ccd .(*PSReal );_bddc {_eeab :=int (_gfa .Val );_aafg =_dda .Push (MakeReal (float64 (_eeab )));
}else if _gede ,_ecgg :=_ccd .(*PSInteger );_ecgg {_aafg =_dda .Push (MakeInteger (_gede .Val ));}else {return ErrTypeCheck ;};return _aafg ;};

// Parse parses the postscript and store as a program that can be executed.
func (_bgda *PSParser )Parse ()(*PSProgram ,error ){_bgda .skipSpaces ();_caa ,_facc :=_bgda ._ccdge .Peek (2);if _facc !=nil {return nil ,_facc ;};if _caa [0]!='{'{return nil ,_ce .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0050\u0053\u0020\u0050\u0072\u006f\u0067\u0072\u0061\u006d\u0020\u006e\u006f\u0074\u0020\u0073t\u0061\u0072\u0074\u0069\u006eg\u0020\u0077i\u0074\u0068\u0020\u007b");
};_acga ,_facc :=_bgda .parseFunction ();if _facc !=nil &&_facc !=_g .EOF {return nil ,_facc ;};return _acga ,_facc ;};

// PSObjectArrayToFloat64Array converts []PSObject into a []float64 array. Each PSObject must represent a number,
// otherwise a ErrTypeCheck error occurs.
func PSObjectArrayToFloat64Array (objects []PSObject )([]float64 ,error ){var _bc []float64 ;for _ ,_ff :=range objects {if _a ,_bgf :=_ff .(*PSInteger );_bgf {_bc =append (_bc ,float64 (_a .Val ));}else if _cgb ,_ef :=_ff .(*PSReal );_ef {_bc =append (_bc ,_cgb .Val );
}else {return nil ,ErrTypeCheck ;};};return _bc ,nil ;};func (_aga *PSOperand )exp (_bead *PSStack )error {_fad ,_aee :=_bead .PopNumberAsFloat64 ();if _aee !=nil {return _aee ;};_agcb ,_aee :=_bead .PopNumberAsFloat64 ();if _aee !=nil {return _aee ;};
if _e .Abs (_fad )< 1&&_agcb < 0{return ErrUndefinedResult ;};_beadf :=_e .Pow (_agcb ,_fad );_aee =_bead .Push (MakeReal (_beadf ));return _aee ;};func (_ca *PSOperand )DebugString ()string {return _cg .Sprintf ("\u006fp\u003a\u0027\u0025\u0073\u0027",*_ca );
};

// PSObject represents a postscript object.
type PSObject interface{

// Duplicate makes a fresh copy of the PSObject.
Duplicate ()PSObject ;

// DebugString returns a descriptive representation of the PSObject with more information than String()
// for debugging purposes.
DebugString ()string ;

// String returns a string representation of the PSObject.
String ()string ;};var ErrTypeCheck =_ce .New ("\u0074\u0079p\u0065\u0020\u0063h\u0065\u0063\u006b\u0020\u0065\u0072\u0072\u006f\u0072");var ErrRangeCheck =_ce .New ("\u0072\u0061\u006e\u0067\u0065\u0020\u0063\u0068\u0065\u0063\u006b\u0020e\u0072\u0072\u006f\u0072");
func (_geda *PSOperand )gt (_fcd *PSStack )error {_eda ,_fdc :=_fcd .PopNumberAsFloat64 ();if _fdc !=nil {return _fdc ;};_beb ,_fdc :=_fcd .PopNumberAsFloat64 ();if _fdc !=nil {return _fdc ;};if _e .Abs (_beb -_eda )< _eb {_fcf :=_fcd .Push (MakeBool (false ));
return _fcf ;}else if _beb > _eda {_ccee :=_fcd .Push (MakeBool (true ));return _ccee ;}else {_acd :=_fcd .Push (MakeBool (false ));return _acd ;};};

// MakeReal returns a new PSReal object initialized with `val`.
func MakeReal (val float64 )*PSReal {_dbda :=PSReal {};_dbda .Val =val ;return &_dbda };func (_fcg *PSOperand )round (_gbc *PSStack )error {_fbg ,_geef :=_gbc .Pop ();if _geef !=nil {return _geef ;};if _eba ,_gdga :=_fbg .(*PSReal );_gdga {_geef =_gbc .Push (MakeReal (_e .Floor (_eba .Val +0.5)));
}else if _ceef ,_bbgd :=_fbg .(*PSInteger );_bbgd {_geef =_gbc .Push (MakeInteger (_ceef .Val ));}else {return ErrTypeCheck ;};return _geef ;};