//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package common contains common properties used by the subpackages.
package common ;import (_d "fmt";_f "io";_ea "os";_c "path/filepath";_e "runtime";_bf "time";);

// Trace logs trace message.
func (_edb WriterLogger )Trace (format string ,args ...interface{}){if _edb .LogLevel >=LogLevelTrace {_acc :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_edb .logToWriter (_edb .Output ,_acc ,format ,args ...);};};

// Error does nothing for dummy logger.
func (DummyLogger )Error (format string ,args ...interface{}){};const _ab =9;

// ConsoleLogger is a logger that writes logs to the 'os.Stdout'
type ConsoleLogger struct{LogLevel LogLevel ;};

// NewConsoleLogger creates new console logger.
func NewConsoleLogger (logLevel LogLevel )*ConsoleLogger {return &ConsoleLogger {LogLevel :logLevel }};

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_ef ConsoleLogger )IsLogLevel (level LogLevel )bool {return _ef .LogLevel >=level };

// IsLogLevel returns true if log level is greater or equal than `level`.
// Can be used to avoid resource intensive calls to loggers.
func (_gd WriterLogger )IsLogLevel (level LogLevel )bool {return _gd .LogLevel >=level };

// Notice logs notice message.
func (_ae WriterLogger )Notice (format string ,args ...interface{}){if _ae .LogLevel >=LogLevelNotice {_gcb :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_ae .logToWriter (_ae .Output ,_gcb ,format ,args ...);};};

// Info logs info message.
func (_ga WriterLogger )Info (format string ,args ...interface{}){if _ga .LogLevel >=LogLevelInfo {_aa :="\u005bI\u004e\u0046\u004f\u005d\u0020";_ga .logToWriter (_ga .Output ,_aa ,format ,args ...);};};const _gad =30;

// SetLogger sets 'logger' to be used by the unidoc unipdf library.
func SetLogger (logger Logger ){Log =logger };

// Debug does nothing for dummy logger.
func (DummyLogger )Debug (format string ,args ...interface{}){};

// Warning does nothing for dummy logger.
func (DummyLogger )Warning (format string ,args ...interface{}){};

// Trace does nothing for dummy logger.
func (DummyLogger )Trace (format string ,args ...interface{}){};

// LogLevel is the verbosity level for logging.
type LogLevel int ;

// WriterLogger is the logger that writes data to the Output writer
type WriterLogger struct{LogLevel LogLevel ;Output _f .Writer ;};func _fd (_bba _f .Writer ,_fef string ,_ca string ,_dbb ...interface{}){_ ,_ecg ,_gf ,_bad :=_e .Caller (3);if !_bad {_ecg ="\u003f\u003f\u003f";_gf =0;}else {_ecg =_c .Base (_ecg );};_beg :=_d .Sprintf ("\u0025s\u0020\u0025\u0073\u003a\u0025\u0064 ",_fef ,_ecg ,_gf )+_ca +"\u000a";
_d .Fprintf (_bba ,_beg ,_dbb ...);};var Log Logger =DummyLogger {};

// Trace logs trace message.
func (_gc ConsoleLogger )Trace (format string ,args ...interface{}){if _gc .LogLevel >=LogLevelTrace {_cf :="\u005b\u0054\u0052\u0041\u0043\u0045\u005d\u0020";_gc .output (_ea .Stdout ,_cf ,format ,args ...);};};func (_cff ConsoleLogger )output (_cb _f .Writer ,_bbgc string ,_bgg string ,_eb ...interface{}){_fd (_cb ,_bbgc ,_bgg ,_eb ...);
};

// Error logs error message.
func (_bbg ConsoleLogger )Error (format string ,args ...interface{}){if _bbg .LogLevel >=LogLevelError {_cg :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_bbg .output (_ea .Stdout ,_cg ,format ,args ...);};};

// UtcTimeFormat returns a formatted string describing a UTC timestamp.
func UtcTimeFormat (t _bf .Time )string {return t .Format (_eeb )+"\u0020\u0055\u0054\u0043"};const _eeb ="\u0032\u0020\u004aan\u0075\u0061\u0072\u0079\u0020\u0032\u0030\u0030\u0036\u0020\u0061\u0074\u0020\u0031\u0035\u003a\u0030\u0034";

// NewWriterLogger creates new 'writer' logger.
func NewWriterLogger (logLevel LogLevel ,writer _f .Writer )*WriterLogger {_gg :=WriterLogger {Output :writer ,LogLevel :logLevel };return &_gg ;};

// IsLogLevel returns true from dummy logger.
func (DummyLogger )IsLogLevel (level LogLevel )bool {return true };

// DummyLogger does nothing.
type DummyLogger struct{};const Version ="\u0033\u002e\u0033\u0039\u002e\u0030";const (LogLevelTrace LogLevel =5;LogLevelDebug LogLevel =4;LogLevelInfo LogLevel =3;LogLevelNotice LogLevel =2;LogLevelWarning LogLevel =1;LogLevelError LogLevel =0;);const _da =15;


// Warning logs warning message.
func (_ec WriterLogger )Warning (format string ,args ...interface{}){if _ec .LogLevel >=LogLevelWarning {_ccg :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ec .logToWriter (_ec .Output ,_ccg ,format ,args ...);};};

// Error logs error message.
func (_cba WriterLogger )Error (format string ,args ...interface{}){if _cba .LogLevel >=LogLevelError {_db :="\u005b\u0045\u0052\u0052\u004f\u0052\u005d\u0020";_cba .logToWriter (_cba .Output ,_db ,format ,args ...);};};

// Debug logs debug message.
func (_ed ConsoleLogger )Debug (format string ,args ...interface{}){if _ed .LogLevel >=LogLevelDebug {_ee :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_ed .output (_ea .Stdout ,_ee ,format ,args ...);};};const _fdb =23;

// Notice does nothing for dummy logger.
func (DummyLogger )Notice (format string ,args ...interface{}){};const _gfc =2022;

// Info does nothing for dummy logger.
func (DummyLogger )Info (format string ,args ...interface{}){};

// Info logs info message.
func (_dfb ConsoleLogger )Info (format string ,args ...interface{}){if _dfb .LogLevel >=LogLevelInfo {_fa :="\u005bI\u004e\u0046\u004f\u005d\u0020";_dfb .output (_ea .Stdout ,_fa ,format ,args ...);};};

// Warning logs warning message.
func (_ge ConsoleLogger )Warning (format string ,args ...interface{}){if _ge .LogLevel >=LogLevelWarning {_be :="\u005b\u0057\u0041\u0052\u004e\u0049\u004e\u0047\u005d\u0020";_ge .output (_ea .Stdout ,_be ,format ,args ...);};};

// Logger is the interface used for logging in the unipdf package.
type Logger interface{Error (_cc string ,_bg ...interface{});Warning (_fe string ,_eg ...interface{});Notice (_eag string ,_bfa ...interface{});Info (_g string ,_cd ...interface{});Debug (_ccd string ,_df ...interface{});Trace (_bb string ,_ba ...interface{});
IsLogLevel (_a LogLevel )bool ;};

// Debug logs debug message.
func (_fg WriterLogger )Debug (format string ,args ...interface{}){if _fg .LogLevel >=LogLevelDebug {_ac :="\u005b\u0044\u0045\u0042\u0055\u0047\u005d\u0020";_fg .logToWriter (_fg .Output ,_ac ,format ,args ...);};};func (_dc WriterLogger )logToWriter (_dfc _f .Writer ,_af string ,_eec string ,_efa ...interface{}){_fd (_dfc ,_af ,_eec ,_efa );
};var ReleasedAt =_bf .Date (_gfc ,_ab ,_fdb ,_da ,_gad ,0,0,_bf .UTC );

// Notice logs notice message.
func (_ag ConsoleLogger )Notice (format string ,args ...interface{}){if _ag .LogLevel >=LogLevelNotice {_bbe :="\u005bN\u004f\u0054\u0049\u0043\u0045\u005d ";_ag .output (_ea .Stdout ,_bbe ,format ,args ...);};};