//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package basic ;import _f "github.com/unidoc/unipdf/v3/internal/jbig2/errors";func (_dg *Stack )Len ()int {return len (_dg .Data )};func NewNumSlice (i int )*NumSlice {_cd :=NumSlice (make ([]float32 ,i ));return &_cd };func (_ad *NumSlice )Add (v float32 ){*_ad =append (*_ad ,v )};
func (_ddb *Stack )peek ()(interface{},bool ){_ced :=_ddb .top ();if _ced ==-1{return nil ,false ;};return _ddb .Data [_ced ],true ;};func Ceil (numerator ,denominator int )int {if numerator %denominator ==0{return numerator /denominator ;};return (numerator /denominator )+1;
};func Min (x ,y int )int {if x < y {return x ;};return y ;};type IntSlice []int ;func NewIntSlice (i int )*IntSlice {_gb :=IntSlice (make ([]int ,i ));return &_gb };func (_ac *IntSlice )Add (v int )error {if _ac ==nil {return _f .Error ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0041\u0064\u0064","\u0073\u006c\u0069\u0063\u0065\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");
};*_ac =append (*_ac ,v );return nil ;};type NumSlice []float32 ;func (_af NumSlice )GetInt (i int )(int ,error ){const _db ="\u0047\u0065\u0074\u0049\u006e\u0074";if i < 0||i > len (_af )-1{return 0,_f .Errorf (_db ,"\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};_aa :=_af [i ];return int (_aa +Sign (_aa )*0.5),nil ;};func (_ed NumSlice )GetIntSlice ()[]int {_gda :=make ([]int ,len (_ed ));for _be ,_ae :=range _ed {_gda [_be ]=int (_ae );};return _gda ;};func (_bb *NumSlice )AddInt (v int ){*_bb =append (*_bb ,float32 (v ))};
func (_e IntsMap )Add (key uint64 ,value int ){_e [key ]=append (_e [key ],value )};func (_ce *IntSlice )Copy ()*IntSlice {_fc :=IntSlice (make ([]int ,len (*_ce )));copy (_fc ,*_ce );return &_fc ;};func (_bf *Stack )Peek ()(_ea interface{},_ge bool ){return _bf .peek ()};
func (_acd IntSlice )Get (index int )(int ,error ){if index > len (_acd )-1{return 0,_f .Errorf ("\u0049\u006e\u0074S\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069\u006e\u0064\u0065x:\u0020\u0025\u0064\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006eg\u0065",index );
};return _acd [index ],nil ;};func Abs (v int )int {if v > 0{return v ;};return -v ;};type Stack struct{Data []interface{};Aux *Stack ;};func (_ff *Stack )top ()int {return len (_ff .Data )-1};func (_c IntsMap )Get (key uint64 )(int ,bool ){_d ,_g :=_c [key ];
if !_g {return 0,false ;};if len (_d )==0{return 0,false ;};return _d [0],true ;};type IntsMap map[uint64 ][]int ;func Sign (v float32 )float32 {if v >=0.0{return 1.0;};return -1.0;};func (_b IntsMap )GetSlice (key uint64 )([]int ,bool ){_gg ,_da :=_b [key ];
if !_da {return nil ,false ;};return _gg ,true ;};func (_eac *Stack )Pop ()(_cc interface{},_gdae bool ){_cc ,_gdae =_eac .peek ();if !_gdae {return nil ,_gdae ;};_eac .Data =_eac .Data [:_eac .top ()];return _cc ,true ;};func Max (x ,y int )int {if x > y {return x ;
};return y ;};func (_dbd *Stack )Push (v interface{}){_dbd .Data =append (_dbd .Data ,v )};func (_dd IntsMap )Delete (key uint64 ){delete (_dd ,key )};func (_gge NumSlice )Get (i int )(float32 ,error ){if i < 0||i > len (_gge )-1{return 0,_f .Errorf ("\u004e\u0075\u006dS\u006c\u0069\u0063\u0065\u002e\u0047\u0065\u0074","\u0069n\u0064\u0065\u0078\u003a\u0020\u0027\u0025\u0064\u0027\u0020\u006fu\u0074\u0020\u006f\u0066\u0020\u0072\u0061\u006e\u0067\u0065",i );
};return _gge [i ],nil ;};func (_gd IntSlice )Size ()int {return len (_gd )};