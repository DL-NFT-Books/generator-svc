//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package huffman ;import (_ga "errors";_bc "fmt";_a "github.com/unidoc/unipdf/v3/internal/bitwise";_g "github.com/unidoc/unipdf/v3/internal/jbig2/internal";_c "math";_b "strings";);func (_dfg *ValueNode )Decode (r _a .StreamReader )(int64 ,error ){_ge ,_ab :=r .ReadBits (byte (_dfg ._bgb ));
if _ab !=nil {return 0,_ab ;};if _dfg ._fb {_ge =-_ge ;};return int64 (_dfg ._dd )+int64 (_ge ),nil ;};func (_gfg *InternalNode )String ()string {_ag :=&_b .Builder {};_ag .WriteString ("\u000a");_gfg .pad (_ag );_ag .WriteString ("\u0030\u003a\u0020");
_ag .WriteString (_gfg ._cfd .String ()+"\u000a");_gfg .pad (_ag );_ag .WriteString ("\u0031\u003a\u0020");_ag .WriteString (_gfg ._cagc .String ()+"\u000a");return _ag .String ();};func _dg (_df *Code )*OutOfBandNode {return &OutOfBandNode {}};var _ Node =&ValueNode {};
type ValueNode struct{_bgb int32 ;_dd int32 ;_fb bool ;};func (_bbg *InternalNode )Decode (r _a .StreamReader )(int64 ,error ){_ef ,_gg :=r .ReadBit ();if _gg !=nil {return 0,_gg ;};if _ef ==0{return _bbg ._cfd .Decode (r );};return _bbg ._cagc .Decode (r );
};func (_cag *ValueNode )String ()string {return _bc .Sprintf ("\u0025\u0064\u002f%\u0064",_cag ._bgb ,_cag ._dd );};func (_cca *InternalNode )append (_cg *Code )(_agc error ){if _cg ._dcf ==0{return nil ;};_bga :=_cg ._dcf -1-_cca ._ddb ;if _bga < 0{return _ga .New ("\u004e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0073\u0068\u0069\u0066\u0074\u0069n\u0067 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0061\u006c\u006c\u006f\u0077\u0065\u0064");
};_cfe :=(_cg ._dgf >>uint (_bga ))&0x1;if _bga ==0{if _cg ._cae ==-1{if _cfe ==1{if _cca ._cagc !=nil {return _bc .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cg );
};_cca ._cagc =_dg (_cg );}else {if _cca ._cfd !=nil {return _bc .Errorf ("O\u004f\u0042\u0020\u0061\u006c\u0072e\u0061\u0064\u0079\u0020\u0073\u0065\u0074\u0020\u0066o\u0072\u0020\u0063o\u0064e\u0020\u0025\u0073",_cg );};_cca ._cfd =_dg (_cg );};}else {if _cfe ==1{if _cca ._cagc !=nil {return _bc .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cg );
};_cca ._cagc =_dgb (_cg );}else {if _cca ._cfd !=nil {return _bc .Errorf ("\u0056\u0061\u006cue\u0020\u004e\u006f\u0064\u0065\u0020\u0061\u006c\u0072e\u0061d\u0079 \u0073e\u0074\u0020\u0066\u006f\u0072\u0020\u0063\u006f\u0064\u0065\u0020\u0025\u0073",_cg );
};_cca ._cfd =_dgb (_cg );};};}else {if _cfe ==1{if _cca ._cagc ==nil {_cca ._cagc =_eeg (_cca ._ddb +1);};if _agc =_cca ._cagc .(*InternalNode ).append (_cg );_agc !=nil {return _agc ;};}else {if _cca ._cfd ==nil {_cca ._cfd =_eeg (_cca ._ddb +1);};if _agc =_cca ._cfd .(*InternalNode ).append (_cg );
_agc !=nil {return _agc ;};};};return nil ;};func (_be *EncodedTable )InitTree (codeTable []*Code )error {_dfcc (codeTable );for _ ,_dc :=range codeTable {if _aa :=_be ._fe .append (_dc );_aa !=nil {return _aa ;};};return nil ;};func (_ee *FixedSizeTable )RootNode ()*InternalNode {return _ee ._fc };
func (_gff *InternalNode )pad (_dfc *_b .Builder ){for _ffb :=int32 (0);_ffb < _gff ._ddb ;_ffb ++{_dfc .WriteString ("\u0020\u0020\u0020");};};func _cfg (_ecb ,_eaa int32 )string {var _aaa int32 ;_aac :=make ([]rune ,_eaa );for _ed :=int32 (1);_ed <=_eaa ;
_ed ++{_aaa =_ecb >>uint (_eaa -_ed )&1;if _aaa !=0{_aac [_ed -1]='1';}else {_aac [_ed -1]='0';};};return string (_aac );};func _dgb (_da *Code )*ValueNode {return &ValueNode {_bgb :_da ._cae ,_dd :_da ._adcg ,_fb :_da ._bfc }};type FixedSizeTable struct{_fc *InternalNode };
func _eeg (_geb int32 )*InternalNode {return &InternalNode {_ddb :_geb }};type BasicTabler interface{HtHigh ()int32 ;HtLow ()int32 ;StreamReader ()_a .StreamReader ;HtPS ()int32 ;HtRS ()int32 ;HtOOB ()int32 ;};func NewFixedSizeTable (codeTable []*Code )(*FixedSizeTable ,error ){_ca :=&FixedSizeTable {_fc :&InternalNode {}};
if _cbc :=_ca .InitTree (codeTable );_cbc !=nil {return nil ,_cbc ;};return _ca ,nil ;};func (_afc *StandardTable )InitTree (codeTable []*Code )error {_dfcc (codeTable );for _ ,_eb :=range codeTable {if _ddd :=_afc ._gdc .append (_eb );_ddd !=nil {return _ddd ;
};};return nil ;};func (_gb *EncodedTable )Decode (r _a .StreamReader )(int64 ,error ){return _gb ._fe .Decode (r )};func _cge (_cgf ,_faa int32 )int32 {if _cgf > _faa {return _cgf ;};return _faa ;};var _bfb =[][][]int32 {{{1,4,0},{2,8,16},{3,16,272},{3,32,65808}},{{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{6,32,75},{6,-1,0}},{{8,8,-256},{1,0,0},{2,0,1},{3,0,2},{4,3,3},{5,6,11},{8,32,-257,999},{7,32,75},{6,-1,0}},{{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{5,32,76}},{{7,8,-255},{1,0,1},{2,0,2},{3,0,3},{4,3,4},{5,6,12},{7,32,-256,999},{6,32,76}},{{5,10,-2048},{4,9,-1024},{4,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{2,7,0},{3,7,128},{3,8,256},{4,9,512},{4,10,1024},{6,32,-2049,999},{6,32,2048}},{{4,9,-1024},{3,8,-512},{4,7,-256},{5,6,-128},{5,5,-64},{4,5,-32},{4,5,0},{5,5,32},{5,6,64},{4,7,128},{3,8,256},{3,9,512},{3,10,1024},{5,32,-1025,999},{5,32,2048}},{{8,3,-15},{9,1,-7},{8,1,-5},{9,0,-3},{7,0,-2},{4,0,-1},{2,1,0},{5,0,2},{6,0,3},{3,4,4},{6,1,20},{4,4,22},{4,5,38},{5,6,70},{5,7,134},{6,7,262},{7,8,390},{6,10,646},{9,32,-16,999},{9,32,1670},{2,-1,0}},{{8,4,-31},{9,2,-15},{8,2,-11},{9,1,-7},{7,1,-5},{4,1,-3},{3,1,-1},{3,1,1},{5,1,3},{6,1,5},{3,5,7},{6,2,39},{4,5,43},{4,6,75},{5,7,139},{5,8,267},{6,8,523},{7,9,779},{6,11,1291},{9,32,-32,999},{9,32,3339},{2,-1,0}},{{7,4,-21},{8,0,-5},{7,0,-4},{5,0,-3},{2,2,-2},{5,0,2},{6,0,3},{7,0,4},{8,0,5},{2,6,6},{5,5,70},{6,5,102},{6,6,134},{6,7,198},{6,8,326},{6,9,582},{6,10,1094},{7,11,2118},{8,32,-22,999},{8,32,4166},{2,-1,0}},{{1,0,1},{2,1,2},{4,0,4},{4,1,5},{5,1,7},{5,2,9},{6,2,13},{7,2,17},{7,3,21},{7,4,29},{7,5,45},{7,6,77},{7,32,141}},{{1,0,1},{2,0,2},{3,1,3},{5,0,5},{5,1,6},{6,1,8},{7,0,10},{7,1,11},{7,2,13},{7,3,17},{7,4,25},{8,5,41},{8,32,73}},{{1,0,1},{3,0,2},{4,0,3},{5,0,4},{4,1,5},{3,3,7},{6,1,15},{6,2,17},{6,3,21},{6,4,29},{6,5,45},{7,6,77},{7,32,141}},{{3,0,-2},{3,0,-1},{1,0,0},{3,0,1},{3,0,2}},{{7,4,-24},{6,2,-8},{5,1,-4},{4,0,-2},{3,0,-1},{1,0,0},{3,0,1},{4,0,2},{5,1,3},{6,2,5},{7,4,9},{7,32,-25,999},{7,32,25}}};
func (_fgd *EncodedTable )parseTable ()error {var (_ea []*Code ;_cf ,_ff ,_gf int32 ;_af uint64 ;_ba error ;);_cb :=_fgd .StreamReader ();_ec :=_fgd .HtLow ();for _ec < _fgd .HtHigh (){_af ,_ba =_cb .ReadBits (byte (_fgd .HtPS ()));if _ba !=nil {return _ba ;
};_cf =int32 (_af );_af ,_ba =_cb .ReadBits (byte (_fgd .HtRS ()));if _ba !=nil {return _ba ;};_ff =int32 (_af );_ea =append (_ea ,NewCode (_cf ,_ff ,_gf ,false ));_ec +=1<<uint (_ff );};_af ,_ba =_cb .ReadBits (byte (_fgd .HtPS ()));if _ba !=nil {return _ba ;
};_cf =int32 (_af );_ff =32;_gf =_fgd .HtLow ()-1;_ea =append (_ea ,NewCode (_cf ,_ff ,_gf ,true ));_af ,_ba =_cb .ReadBits (byte (_fgd .HtPS ()));if _ba !=nil {return _ba ;};_cf =int32 (_af );_ff =32;_gf =_fgd .HtHigh ();_ea =append (_ea ,NewCode (_cf ,_ff ,_gf ,false ));
if _fgd .HtOOB ()==1{_af ,_ba =_cb .ReadBits (byte (_fgd .HtPS ()));if _ba !=nil {return _ba ;};_cf =int32 (_af );_ea =append (_ea ,NewCode (_cf ,-1,-1,false ));};if _ba =_fgd .InitTree (_ea );_ba !=nil {return _ba ;};return nil ;};var _ Tabler =&EncodedTable {};
func (_bb *EncodedTable )RootNode ()*InternalNode {return _bb ._fe };func (_bf *FixedSizeTable )String ()string {return _bf ._fc .String ()+"\u000a"};type InternalNode struct{_ddb int32 ;_cfd Node ;_cagc Node ;};func NewEncodedTable (table BasicTabler )(*EncodedTable ,error ){_feb :=&EncodedTable {_fe :&InternalNode {},BasicTabler :table };
if _fg :=_feb .parseTable ();_fg !=nil {return nil ,_fg ;};return _feb ,nil ;};func (_fcc *StandardTable )RootNode ()*InternalNode {return _fcc ._gdc };func _dfcc (_bce []*Code ){var _fa int32 ;for _ ,_ae :=range _bce {_fa =_cge (_fa ,_ae ._dcf );};_aea :=make ([]int32 ,_fa +1);
for _ ,_adce :=range _bce {_aea [_adce ._dcf ]++;};var _ffg int32 ;_egf :=make ([]int32 ,len (_aea )+1);_aea [0]=0;for _gc :=int32 (1);_gc <=int32 (len (_aea ));_gc ++{_egf [_gc ]=(_egf [_gc -1]+(_aea [_gc -1]))<<1;_ffg =_egf [_gc ];for _ ,_ccb :=range _bce {if _ccb ._dcf ==_gc {_ccb ._dgf =_ffg ;
_ffg ++;};};};};func (_baa *OutOfBandNode )String ()string {return _bc .Sprintf ("\u0025\u0030\u00364\u0062",int64 (_c .MaxInt64 ));};func NewCode (prefixLength ,rangeLength ,rangeLow int32 ,isLowerRange bool )*Code {return &Code {_dcf :prefixLength ,_cae :rangeLength ,_adcg :rangeLow ,_bfc :isLowerRange ,_dgf :-1};
};type Tabler interface{Decode (_bd _a .StreamReader )(int64 ,error );InitTree (_adcf []*Code )error ;String ()string ;RootNode ()*InternalNode ;};var _bba =make ([]Tabler ,len (_bfb ));var _ Node =&OutOfBandNode {};type Code struct{_dcf int32 ;_cae int32 ;
_adcg int32 ;_bfc bool ;_dgf int32 ;};type EncodedTable struct{BasicTabler ;_fe *InternalNode ;};func (_ad *EncodedTable )String ()string {return _ad ._fe .String ()+"\u000a"};func (_gfe *StandardTable )Decode (r _a .StreamReader )(int64 ,error ){return _gfe ._gdc .Decode (r )};
func (_ege *Code )String ()string {var _bgc string ;if _ege ._dgf !=-1{_bgc =_cfg (_ege ._dgf ,_ege ._dcf );}else {_bgc ="\u003f";};return _bc .Sprintf ("%\u0073\u002f\u0025\u0064\u002f\u0025\u0064\u002f\u0025\u0064",_bgc ,_ege ._dcf ,_ege ._cae ,_ege ._adcg );
};type OutOfBandNode struct{};type StandardTable struct{_gdc *InternalNode };func (_de *OutOfBandNode )Decode (r _a .StreamReader )(int64 ,error ){return 0,_g .ErrOOB };func (_afg *FixedSizeTable )InitTree (codeTable []*Code )error {_dfcc (codeTable );
for _ ,_adc :=range codeTable {_bg :=_afg ._fc .append (_adc );if _bg !=nil {return _bg ;};};return nil ;};func (_dab *StandardTable )String ()string {return _dab ._gdc .String ()+"\u000a"};type Node interface{Decode (_gd _a .StreamReader )(int64 ,error );
String ()string ;};var _ Node =&InternalNode {};func _ebb (_fgc [][]int32 )(*StandardTable ,error ){var _aad []*Code ;for _fgb :=0;_fgb < len (_fgc );_fgb ++{_ebf :=_fgc [_fgb ][0];_bff :=_fgc [_fgb ][1];_dca :=_fgc [_fgb ][2];var _efa bool ;if len (_fgc [_fgb ])> 3{_efa =true ;
};_aad =append (_aad ,NewCode (_ebf ,_bff ,_dca ,_efa ));};_bbd :=&StandardTable {_gdc :_eeg (0)};if _cbe :=_bbd .InitTree (_aad );_cbe !=nil {return nil ,_cbe ;};return _bbd ,nil ;};func GetStandardTable (number int )(Tabler ,error ){if number <=0||number > len (_bba ){return nil ,_ga .New ("\u0049n\u0064e\u0078\u0020\u006f\u0075\u0074 \u006f\u0066 \u0072\u0061\u006e\u0067\u0065");
};_ccc :=_bba [number -1];if _ccc ==nil {var _egg error ;_ccc ,_egg =_ebb (_bfb [number -1]);if _egg !=nil {return nil ,_egg ;};_bba [number -1]=_ccc ;};return _ccc ,nil ;};func (_db *FixedSizeTable )Decode (r _a .StreamReader )(int64 ,error ){return _db ._fc .Decode (r )};
