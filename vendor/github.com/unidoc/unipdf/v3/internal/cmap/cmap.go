//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package cmap ;import (_ef "bufio";_ea "bytes";_e "encoding/hex";_cf "errors";_f "fmt";_cd "github.com/unidoc/unipdf/v3/common";_a "github.com/unidoc/unipdf/v3/core";_fa "github.com/unidoc/unipdf/v3/internal/cmap/bcmaps";_eg "io";_ba "sort";_g "strconv";
_be "strings";_c "unicode/utf16";);func (cmap *CMap )String ()string {_dccd :=cmap ._cb ;_fab :=[]string {_f .Sprintf ("\u006e\u0062\u0069\u0074\u0073\u003a\u0025\u0064",cmap ._dd ),_f .Sprintf ("\u0074y\u0070\u0065\u003a\u0025\u0064",cmap ._bb )};if cmap ._bg !=""{_fab =append (_fab ,_f .Sprintf ("\u0076\u0065\u0072\u0073\u0069\u006f\u006e\u003a\u0025\u0073",cmap ._bg ));
};if cmap ._bab !=""{_fab =append (_fab ,_f .Sprintf ("u\u0073\u0065\u0063\u006d\u0061\u0070\u003a\u0025\u0023\u0071",cmap ._bab ));};_fab =append (_fab ,_f .Sprintf ("\u0073\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f\u003a\u0025\u0073",_dccd .String ()));
if len (cmap ._egg )> 0{_fab =append (_fab ,_f .Sprintf ("\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u003a\u0025\u0064",len (cmap ._egg )));};if len (cmap ._ae )> 0{_fab =append (_fab ,_f .Sprintf ("\u0063\u006fd\u0065\u0054\u006fU\u006e\u0069\u0063\u006f\u0064\u0065\u003a\u0025\u0064",len (cmap ._ae )));
};return _f .Sprintf ("\u0043\u004d\u0041P\u007b\u0025\u0023\u0071\u0020\u0025\u0073\u007d",cmap ._df ,_be .Join (_fab ,"\u0020"));};func _ge (_bbd bool )*CMap {_cgc :=16;if _bbd {_cgc =8;};return &CMap {_dd :_cgc ,_gd :make (map[CharCode ]CharCode ),_aab :make (map[CharCode ]CharCode ),_ae :make (map[CharCode ]string ),_aed :make (map[string ]CharCode )};
};func (cmap *CMap )parseName ()error {_fac :="";_bagg :=false ;for _gfg :=0;_gfg < 20&&!_bagg ;_gfg ++{_efa ,_aee :=cmap .parseObject ();if _aee !=nil {return _aee ;};switch _eca :=_efa .(type ){case cmapOperand :switch _eca .Operand {case "\u0064\u0065\u0066":_bagg =true ;
default:_cd .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a\u0020\u0053\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076\u0020n\u0061\u006de\u003d\u0025\u0023\u0071",_efa ,_fac );
if _fac !=""{_fac =_f .Sprintf ("\u0025\u0073\u0020%\u0073",_fac ,_eca .Operand );};_cd .Log .Debug ("\u0070\u0061\u0072\u0073\u0065\u004e\u0061\u006d\u0065\u003a \u0052\u0065\u0063\u006f\u0076\u0065\u0072e\u0064\u002e\u0020\u006e\u0061\u006d\u0065\u003d\u0025\u0023\u0071",_fac );
};case cmapName :_fac =_eca .Name ;};};if !_bagg {_cd .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0070\u0061\u0072\u0073\u0065N\u0061m\u0065:\u0020\u004e\u006f\u0020\u0064\u0065\u0066 ");return ErrBadCMap ;};cmap ._df =_fac ;return nil ;};type Codespace struct{NumBytes int ;
Low CharCode ;High CharCode ;};func (cmap *CMap )parseType ()error {_efac :=0;_bdf :=false ;for _fbd :=0;_fbd < 3&&!_bdf ;_fbd ++{_aegd ,_bbg :=cmap .parseObject ();if _bbg !=nil {return _bbg ;};switch _fcgc :=_aegd .(type ){case cmapOperand :switch _fcgc .Operand {case "\u0064\u0065\u0066":_bdf =true ;
default:_cd .Log .Error ("\u0070\u0061r\u0073\u0065\u0054\u0079\u0070\u0065\u003a\u0020\u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020\u006f=%\u0023\u0076",_aegd );return ErrBadCMap ;};case cmapInt :_efac =int (_fcgc ._fegd );
};};cmap ._bb =_efac ;return nil ;};func NewToUnicodeCMap (codeToRune map[CharCode ]rune )*CMap {_bbe :=make (map[CharCode ]string ,len (codeToRune ));for _ag ,_cc :=range codeToRune {_bbe [_ag ]=string (_cc );};cmap :=&CMap {_df :"\u0041d\u006fb\u0065\u002d\u0049\u0064\u0065n\u0074\u0069t\u0079\u002d\u0055\u0043\u0053",_bb :2,_dd :16,_cb :CIDSystemInfo {Registry :"\u0041\u0064\u006fb\u0065",Ordering :"\u0055\u0043\u0053",Supplement :0},_egg :[]Codespace {{Low :0,High :0xffff}},_ae :_bbe ,_aed :make (map[string ]CharCode ,len (codeToRune )),_gd :make (map[CharCode ]CharCode ,len (codeToRune )),_aab :make (map[CharCode ]CharCode ,len (codeToRune ))};
cmap .computeInverseMappings ();return cmap ;};type cmapString struct{String string ;};func (cmap *CMap )Stream ()(*_a .PdfObjectStream ,error ){if cmap ._dg !=nil {return cmap ._dg ,nil ;};_adc ,_gcf :=_a .MakeStream (cmap .Bytes (),_a .NewFlateEncoder ());
if _gcf !=nil {return nil ,_gcf ;};cmap ._dg =_adc ;return cmap ._dg ,nil ;};func (cmap *CMap )NBits ()int {return cmap ._dd };func LoadCmapFromDataCID (data []byte )(*CMap ,error ){return LoadCmapFromData (data ,false )};func (cmap *CMap )CIDSystemInfo ()CIDSystemInfo {return cmap ._cb };
func LoadCmapFromData (data []byte ,isSimple bool )(*CMap ,error ){_cd .Log .Trace ("\u004c\u006fa\u0064\u0043\u006d\u0061\u0070\u0046\u0072\u006f\u006d\u0044\u0061\u0074\u0061\u003a\u0020\u0069\u0073\u0053\u0069\u006d\u0070\u006ce=\u0025\u0074",isSimple );
cmap :=_ge (isSimple );cmap .cMapParser =_fgb (data );_dc :=cmap .parse ();if _dc !=nil {return nil ,_dc ;};if len (cmap ._egg )==0{if cmap ._bab !=""{return cmap ,nil ;};_cd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0063\u006d\u0061p=\u0025\u0073",cmap );
return nil ,ErrBadCMap ;};cmap .computeInverseMappings ();return cmap ,nil ;};const (_eb =4;MissingCodeRune ='\ufffd';MissingCodeString =string (MissingCodeRune ););func (_feeb *cMapParser )parseObject ()(cmapObject ,error ){_feeb .skipSpaces ();for {_fgae ,_bef :=_feeb ._agf .Peek (2);
if _bef !=nil {return nil ,_bef ;};if _fgae [0]=='%'{_feeb .parseComment ();_feeb .skipSpaces ();continue ;}else if _fgae [0]=='/'{_dcg ,_dcga :=_feeb .parseName ();return _dcg ,_dcga ;}else if _fgae [0]=='('{_fdd ,_cgbb :=_feeb .parseString ();return _fdd ,_cgbb ;
}else if _fgae [0]=='['{_ecab ,_cae :=_feeb .parseArray ();return _ecab ,_cae ;}else if (_fgae [0]=='<')&&(_fgae [1]=='<'){_dgdc ,_faag :=_feeb .parseDict ();return _dgdc ,_faag ;}else if _fgae [0]=='<'{_caag ,_cffa :=_feeb .parseHexString ();return _caag ,_cffa ;
}else if _a .IsDecimalDigit (_fgae [0])||(_fgae [0]=='-'&&_a .IsDecimalDigit (_fgae [1])){_cdd ,_ccgg :=_feeb .parseNumber ();if _ccgg !=nil {return nil ,_ccgg ;};return _cdd ,nil ;}else {_cca ,_cbg :=_feeb .parseOperand ();if _cbg !=nil {return nil ,_cbg ;
};return _cca ,nil ;};};};func (cmap *CMap )WMode ()(int ,bool ){return cmap ._fc ._cdecd ,cmap ._fc ._gfca };func _fdg (_ade string )string {_dfe :=[]rune (_ade );_cff :=make ([]string ,len (_dfe ));for _dcae ,_aae :=range _dfe {_cff [_dcae ]=_f .Sprintf ("\u0025\u0030\u0034\u0078",_aae );
};return _f .Sprintf ("\u003c\u0025\u0073\u003e",_be .Join (_cff ,""));};func _efgf (_fcbf ,_gffc int )int {if _fcbf < _gffc {return _fcbf ;};return _gffc ;};type cmapObject interface{};var (ErrBadCMap =_cf .New ("\u0062\u0061\u0064\u0020\u0063\u006d\u0061\u0070");
ErrBadCMapComment =_cf .New ("c\u006f\u006d\u006d\u0065\u006e\u0074 \u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0073\u0074a\u0072\u0074\u0020w\u0069t\u0068\u0020\u0025");ErrBadCMapDict =_cf .New ("\u0069\u006e\u0076a\u006c\u0069\u0064\u0020\u0064\u0069\u0063\u0074");
);func _efee (_fga string )rune {_bdc :=[]rune (_fga );return _bdc [len (_bdc )-1]};func (_aaa *cMapParser )skipSpaces ()(int ,error ){_fgab :=0;for {_fedd ,_cdec :=_aaa ._agf .Peek (1);if _cdec !=nil {return 0,_cdec ;};if _a .IsWhiteSpace (_fedd [0]){_aaa ._agf .ReadByte ();
_fgab ++;}else {break ;};};return _fgab ,nil ;};func (cmap *CMap )inCodespace (_cgb CharCode ,_aag int )bool {for _ ,_dcf :=range cmap ._egg {if _dcf .Low <=_cgb &&_cgb <=_dcf .High &&_aag ==_dcf .NumBytes {return true ;};};return false ;};type cmapDict struct{Dict map[string ]cmapObject ;
};func (_cdg *cMapParser )parseComment ()(string ,error ){var _dec _ea .Buffer ;_ ,_acf :=_cdg .skipSpaces ();if _acf !=nil {return _dec .String (),_acf ;};_gfe :=true ;for {_gafc ,_edb :=_cdg ._agf .Peek (1);if _edb !=nil {_cd .Log .Debug ("p\u0061r\u0073\u0065\u0043\u006f\u006d\u006d\u0065\u006et\u003a\u0020\u0065\u0072r=\u0025\u0076",_edb );
return _dec .String (),_edb ;};if _gfe &&_gafc [0]!='%'{return _dec .String (),ErrBadCMapComment ;};_gfe =false ;if (_gafc [0]!='\r')&&(_gafc [0]!='\n'){_caca ,_ :=_cdg ._agf .ReadByte ();_dec .WriteByte (_caca );}else {break ;};};return _dec .String (),nil ;
};type cMapParser struct{_agf *_ef .Reader };func _eae (_dgb string )(*CMap ,error ){_bf ,_cbb :=_fa .Asset (_dgb );if _cbb !=nil {return nil ,_cbb ;};return LoadCmapFromDataCID (_bf );};const (_eaeg =100;_fcb ="\u000a\u002f\u0043\u0049\u0044\u0049\u006e\u0069\u0074\u0020\u002f\u0050\u0072\u006fc\u0053\u0065\u0074\u0020\u0066\u0069\u006e\u0064\u0072es\u006fu\u0072c\u0065 \u0062\u0065\u0067\u0069\u006e\u000a\u0031\u0032\u0020\u0064\u0069\u0063\u0074\u0020\u0062\u0065\u0067\u0069n\u000a\u0062\u0065\u0067\u0069\u006e\u0063\u006d\u0061\u0070\n\u002f\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065m\u0049\u006e\u0066\u006f\u0020\u003c\u003c\u0020\u002f\u0052\u0065\u0067\u0069\u0073t\u0072\u0079\u0020\u0028\u0041\u0064\u006f\u0062\u0065\u0029\u0020\u002f\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067\u0020\u0028\u0055\u0043\u0053)\u0020\u002f\u0053\u0075\u0070p\u006c\u0065\u006d\u0065\u006et\u0020\u0030\u0020\u003e\u003e\u0020\u0064\u0065\u0066\u000a\u002f\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u002f\u0041\u0064\u006f\u0062\u0065-\u0049\u0064\u0065\u006e\u0074\u0069\u0074\u0079\u002d\u0055\u0043\u0053\u0020\u0064\u0065\u0066\u000a\u002fC\u004d\u0061\u0070\u0054\u0079\u0070\u0065\u0020\u0032\u0020\u0064\u0065\u0066\u000a\u0031\u0020\u0062\u0065\u0067\u0069\u006e\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063e\u0072\u0061n\u0067\u0065\n\u003c\u0030\u0030\u0030\u0030\u003e\u0020<\u0046\u0046\u0046\u0046\u003e\u000a\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065\u000a";
_faa ="\u0065\u006e\u0064\u0063\u006d\u0061\u0070\u000a\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065\u0020\u0063ur\u0072e\u006e\u0074\u0064\u0069\u0063\u0074\u0020\u002f\u0043\u004d\u0061\u0070 \u0064\u0065\u0066\u0069\u006e\u0065\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065\u0020\u0070\u006fp\u000a\u0065\u006e\u0064\u000a\u0065\u006e\u0064\u000a";
);func _eaf (_gcg cmapHexString )CharCode {_egbb :=CharCode (0);for _ ,_aege :=range _gcg ._egd {_egbb <<=8;_egbb |=CharCode (_aege );};return _egbb ;};func (_dfa *cMapParser )parseOperand ()(cmapOperand ,error ){_dceb :=cmapOperand {};_gfab :=_ea .Buffer {};
for {_ffgf ,_bdb :=_dfa ._agf .Peek (1);if _bdb !=nil {if _bdb ==_eg .EOF {break ;};return _dceb ,_bdb ;};if _a .IsDelimiter (_ffgf [0]){break ;};if _a .IsWhiteSpace (_ffgf [0]){break ;};_dde ,_ :=_dfa ._agf .ReadByte ();_gfab .WriteByte (_dde );};if _gfab .Len ()==0{return _dceb ,_f .Errorf ("\u0069\u006e\u0076al\u0069\u0064\u0020\u006f\u0070\u0065\u0072\u0061\u006e\u0064\u0020\u0028\u0065\u006d\u0070\u0074\u0079\u0029");
};_dceb .Operand =_gfab .String ();return _dceb ,nil ;};type cmapArray struct{Array []cmapObject ;};func (cmap *CMap )parseVersion ()error {_bbaf :="";_cec :=false ;for _gca :=0;_gca < 3&&!_cec ;_gca ++{_faf ,_dgbb :=cmap .parseObject ();if _dgbb !=nil {return _dgbb ;
};switch _egag :=_faf .(type ){case cmapOperand :switch _egag .Operand {case "\u0064\u0065\u0066":_cec =true ;default:_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0070\u0061\u0072\u0073\u0065\u0056e\u0072\u0073\u0069\u006f\u006e\u003a \u0073\u0074\u0061\u0074\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u002e\u0020o\u003d\u0025\u0023\u0076",_faf );
return ErrBadCMap ;};case cmapInt :_bbaf =_f .Sprintf ("\u0025\u0064",_egag ._fegd );case cmapFloat :_bbaf =_f .Sprintf ("\u0025\u0066",_egag ._dacb );case cmapString :_bbaf =_egag .String ;default:_cd .Log .Debug ("\u0045\u0052RO\u0052\u003a\u0020p\u0061\u0072\u0073\u0065Ver\u0073io\u006e\u003a\u0020\u0042\u0061\u0064\u0020ty\u0070\u0065\u002e\u0020\u006f\u003d\u0025#\u0076",_faf );
};};cmap ._bg =_bbaf ;return nil ;};type CIDSystemInfo struct{Registry string ;Ordering string ;Supplement int ;};func (_dfbg *cMapParser )parseNumber ()(cmapObject ,error ){_cddc ,_eaab :=_a .ParseNumber (_dfbg ._agf );if _eaab !=nil {return nil ,_eaab ;
};switch _fgbf :=_cddc .(type ){case *_a .PdfObjectFloat :return cmapFloat {float64 (*_fgbf )},nil ;case *_a .PdfObjectInteger :return cmapInt {int64 (*_fgbf )},nil ;};return nil ,_f .Errorf ("\u0075n\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0054",_cddc );
};func (cmap *CMap )CharcodeToUnicode (code CharCode )(string ,bool ){if _dfb ,_bbb :=cmap ._ae [code ];_bbb {return _dfb ,true ;};return MissingCodeString ,false ;};func (cmap *CMap )matchCode (_bgg []byte )(_gb CharCode ,_gge int ,_edad bool ){for _efe :=0;
_efe < _eb ;_efe ++{if _efe < len (_bgg ){_gb =_gb <<8|CharCode (_bgg [_efe ]);_gge ++;};_edad =cmap .inCodespace (_gb ,_efe +1);if _edad {return _gb ,_gge ,true ;};};_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063o\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0020m\u0061t\u0063\u0068\u0065\u0073\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d=\u0025\u0023\u0071\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",_bgg ,string (_bgg ),cmap );
return 0,0,false ;};func (_efba *cMapParser )parseString ()(cmapString ,error ){_efba ._agf .ReadByte ();_dce :=_ea .Buffer {};_daaa :=1;for {_abd ,_befa :=_efba ._agf .Peek (1);if _befa !=nil {return cmapString {_dce .String ()},_befa ;};if _abd [0]=='\\'{_efba ._agf .ReadByte ();
_daeb ,_gac :=_efba ._agf .ReadByte ();if _gac !=nil {return cmapString {_dce .String ()},_gac ;};if _a .IsOctalDigit (_daeb ){_cabf ,_fcd :=_efba ._agf .Peek (2);if _fcd !=nil {return cmapString {_dce .String ()},_fcd ;};var _badb []byte ;_badb =append (_badb ,_daeb );
for _ ,_gaef :=range _cabf {if _a .IsOctalDigit (_gaef ){_badb =append (_badb ,_gaef );}else {break ;};};_efba ._agf .Discard (len (_badb )-1);_cd .Log .Trace ("\u004e\u0075\u006d\u0065ri\u0063\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0022\u0025\u0073\u0022",_badb );
_dbe ,_fcd :=_g .ParseUint (string (_badb ),8,32);if _fcd !=nil {return cmapString {_dce .String ()},_fcd ;};_dce .WriteByte (byte (_dbe ));continue ;};switch _daeb {case 'n':_dce .WriteByte ('\n');case 'r':_dce .WriteByte ('\r');case 't':_dce .WriteByte ('\t');
case 'b':_dce .WriteByte ('\b');case 'f':_dce .WriteByte ('\f');case '(':_dce .WriteByte ('(');case ')':_dce .WriteByte (')');case '\\':_dce .WriteByte ('\\');};continue ;}else if _abd [0]=='('{_daaa ++;}else if _abd [0]==')'{_daaa --;if _daaa ==0{_efba ._agf .ReadByte ();
break ;};};_dea ,_ :=_efba ._agf .ReadByte ();_dce .WriteByte (_dea );};return cmapString {_dce .String ()},nil ;};func _cdad (_gee cmapHexString )[]rune {if len (_gee ._egd )==1{return []rune {rune (_gee ._egd [0])};};_cad :=_gee ._egd ;if len (_cad )%2!=0{_cad =append (_cad ,0);
_cd .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u0073\u002e\u0020\u0050\u0061\u0064\u0064\u0069\u006e\u0067\u0020\u0073\u0068\u0065\u0078\u003d\u0025#\u0076\u0020\u0074\u006f\u0020\u0025\u002b\u0076",_gee ,_cad );
};_gcc :=len (_cad )>>1;_cga :=make ([]uint16 ,_gcc );for _fae :=0;_fae < _gcc ;_fae ++{_cga [_fae ]=uint16 (_cad [_fae <<1])<<8+uint16 (_cad [_fae <<1+1]);};_afg :=_c .Decode (_cga );return _afg ;};func (cmap *CMap )parseBfrange ()error {for {var _dedc CharCode ;
_bgbc ,_cdc :=cmap .parseObject ();if _cdc !=nil {if _cdc ==_eg .EOF {break ;};return _cdc ;};switch _afb :=_bgbc .(type ){case cmapOperand :if _afb .Operand ==_fgf {return nil ;};return _cf .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_dedc =_eaf (_afb );default:return _cf .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};var _bcg CharCode ;_bgbc ,_cdc =cmap .parseObject ();if _cdc !=nil {if _cdc ==_eg .EOF {break ;};return _cdc ;
};switch _ege :=_bgbc .(type ){case cmapOperand :_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0049\u006e\u0063\u006f\u006d\u0070\u006c\u0065\u0074\u0065\u0020\u0062\u0066r\u0061\u006e\u0067\u0065\u0020\u0074\u0072i\u0070\u006c\u0065\u0074");
return ErrBadCMap ;case cmapHexString :_bcg =_eaf (_ege );if _bcg > 0xffff{_bcg =0xffff;};default:_cd .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_bgbc );return ErrBadCMap ;
};_bgbc ,_cdc =cmap .parseObject ();if _cdc !=nil {if _cdc ==_eg .EOF {break ;};return _cdc ;};switch _ebef :=_bgbc .(type ){case cmapArray :if len (_ebef .Array )!=int (_bcg -_dedc )+1{_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0049\u006e\u0076\u0061\u006c\u0069d\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u006f\u0066\u0020\u0069\u0074\u0065\u006d\u0073\u0020\u0069\u006e\u0020a\u0072\u0072\u0061\u0079");
return ErrBadCMap ;};for _caccb :=_dedc ;_caccb <=_bcg ;_caccb ++{_baggc :=_ebef .Array [_caccb -_dedc ];_cbda ,_egee :=_baggc .(cmapHexString );if !_egee {return _cf .New ("\u006e\u006f\u006e-h\u0065\u0078\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0069\u006e\u0020\u0061\u0072\u0072\u0061\u0079");
};_dff :=_cdad (_cbda );cmap ._ae [_caccb ]=string (_dff );};case cmapHexString :_cbe :=_cdad (_ebef );_fgce :=len (_cbe );for _cbeb :=_dedc ;_cbeb <=_bcg ;_cbeb ++{cmap ._ae [_cbeb ]=string (_cbe );if _fgce > 0{_cbe [_fgce -1]++;}else {_cd .Log .Debug ("\u004e\u006f\u0020c\u006d\u0061\u0070\u0020\u0074\u0061\u0072\u0067\u0065\u0074\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074\u0065\u0072\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0066\u006f\u0072\u0020\u0025\u0023\u0076",_cbeb );
};if _cbeb ==1<<32-1{break ;};};default:_cd .Log .Debug ("\u0045R\u0052\u004f\u0052\u003a \u0055\u006e\u0065\u0078\u0070e\u0063t\u0065d\u0020\u0074\u0079\u0070\u0065\u0020\u0025T",_bgbc );return ErrBadCMap ;};};return nil ;};type cmapOperand struct{Operand string ;
};func (cmap *CMap )CharcodeToCID (code CharCode )(CharCode ,bool ){_fde ,_bc :=cmap ._gd [code ];return _fde ,_bc ;};const (_gaf ="\u0043\u0049\u0044\u0053\u0079\u0073\u0074\u0065\u006d\u0049\u006e\u0066\u006f";_bfcb ="\u0062e\u0067\u0069\u006e\u0063\u006d\u0061p";
_ffb ="\u0065n\u0064\u0063\u006d\u0061\u0070";_accef ="\u0062\u0065\u0067\u0069nc\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0072\u0061\u006e\u0067\u0065";_cbff ="\u0065\u006e\u0064\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065r\u0061\u006e\u0067\u0065";
_baad ="b\u0065\u0067\u0069\u006e\u0062\u0066\u0063\u0068\u0061\u0072";_aegg ="\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r";_eggb ="\u0062\u0065\u0067i\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065";_fgf ="\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065";
_gae ="\u0062\u0065\u0067\u0069\u006e\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_eff ="e\u006e\u0064\u0063\u0069\u0064\u0072\u0061\u006e\u0067\u0065";_aadb ="\u0075s\u0065\u0063\u006d\u0061\u0070";_egea ="\u0057\u004d\u006fd\u0065";_abbg ="\u0043\u004d\u0061\u0070\u004e\u0061\u006d\u0065";
_ccg ="\u0043\u004d\u0061\u0070\u0054\u0079\u0070\u0065";_ceg ="C\u004d\u0061\u0070\u0056\u0065\u0072\u0073\u0069\u006f\u006e";);func _fgb (_agg []byte )*cMapParser {_cea :=cMapParser {};_aba :=_ea .NewBuffer (_agg );_cea ._agf =_ef .NewReader (_aba );
return &_cea ;};func (cmap *CMap )parseCIDRange ()error {for {_faae ,_gbf :=cmap .parseObject ();if _gbf !=nil {if _gbf ==_eg .EOF {break ;};return _gbf ;};_aea ,_abbd :=_faae .(cmapHexString );if !_abbd {if _gea ,_feec :=_faae .(cmapOperand );_feec {if _gea .Operand ==_eff {return nil ;
};return _cf .New ("\u0063\u0069\u0064\u0020\u0069\u006e\u0074\u0065\u0072\u0076\u0061\u006c\u0020s\u0074\u0061\u0072\u0074\u0020\u006du\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");};};_gfa :=_eaf (_aea );
_faae ,_gbf =cmap .parseObject ();if _gbf !=nil {if _gbf ==_eg .EOF {break ;};return _gbf ;};_ggbg ,_abbd :=_faae .(cmapHexString );if !_abbd {return _cf .New ("\u0063\u0069d\u0020\u0069\u006e\u0074e\u0072\u0076a\u006c\u0020\u0065\u006e\u0064\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0068\u0065\u0078\u0020\u0073t\u0072\u0069\u006e\u0067");
};if len (_aea ._egd )!=len (_ggbg ._egd ){return _cf .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");};_afa :=_eaf (_ggbg );
if _gfa > _afa {_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0043\u0049\u0044\u0020\u0072\u0061\u006e\u0067\u0065\u002e\u0020\u0073t\u0061\u0072\u0074\u003d\u0030\u0078\u0025\u0030\u0032\u0078\u0020\u0065\u006e\u0064=\u0030x\u0025\u0030\u0032\u0078",_gfa ,_afa );
return ErrBadCMap ;};_faae ,_gbf =cmap .parseObject ();if _gbf !=nil {if _gbf ==_eg .EOF {break ;};return _gbf ;};_fbb ,_abbd :=_faae .(cmapInt );if !_abbd {return _cf .New ("\u0063\u0069\u0064\u0020\u0073t\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006d\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u006e\u0020\u0064\u0065\u0063\u0069\u006d\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _fbb ._fegd < 0{return _cf .New ("\u0069\u006e\u0076al\u0069\u0064\u0020\u0063\u0069\u0064\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0076\u0061\u006c\u0075\u0065");};_ccd :=_fbb ._fegd ;for _fef :=_gfa ;_fef <=_afa ;_fef ++{cmap ._gd [_fef ]=CharCode (_ccd );
_ccd ++;};_cd .Log .Trace ("C\u0049\u0044\u0020\u0072\u0061\u006eg\u0065\u003a\u0020\u003c\u0030\u0078\u0025\u0058\u003e \u003c\u0030\u0078%\u0058>\u0020\u0025\u0064",_gfa ,_afa ,_fbb ._fegd );};return nil ;};func (cmap *CMap )parseBfchar ()error {for {_febb ,_bda :=cmap .parseObject ();
if _bda !=nil {if _bda ==_eg .EOF {break ;};return _bda ;};var _ebb CharCode ;switch _gff :=_febb .(type ){case cmapOperand :if _gff .Operand ==_aegg {return nil ;};return _cf .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");
case cmapHexString :_ebb =_eaf (_gff );default:return _cf .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065");};_febb ,_bda =cmap .parseObject ();if _bda !=nil {if _bda ==_eg .EOF {break ;};return _bda ;};var _ccc []rune ;
switch _ffc :=_febb .(type ){case cmapOperand :if _ffc .Operand ==_aegg {return nil ;};_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0055\u006e\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u0070\u0065\u0072\u0061\u006e\u0064\u002e\u0020\u0025\u0023\u0076",_ffc );
return ErrBadCMap ;case cmapHexString :_ccc =_cdad (_ffc );case cmapName :_cd .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0061\u006de\u002e \u0025\u0023\u0076",_ffc );_ccc =[]rune {MissingCodeRune };
default:_cd .Log .Debug ("E\u0052\u0052\u004f\u0052\u003a\u0020U\u006e\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064 \u0074\u0079\u0070e\u002e \u0025\u0023\u0076",_febb );return ErrBadCMap ;};cmap ._ae [_ebb ]=string (_ccc );};return nil ;};type fbRange struct{_ec CharCode ;
_fd CharCode ;_cg string ;};func (_aa *CIDSystemInfo )String ()string {return _f .Sprintf ("\u0025\u0073\u002d\u0025\u0073\u002d\u0025\u0030\u0033\u0064",_aa .Registry ,_aa .Ordering ,_aa .Supplement );};func (cmap *CMap )Name ()string {return cmap ._df };
type charRange struct{_d CharCode ;_cda CharCode ;};func (cmap *CMap )Type ()int {return cmap ._bb };func (_cagb *cMapParser )parseDict ()(cmapDict ,error ){_cd .Log .Trace ("\u0052\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020D\u0069\u0063\u0074\u0021");
_fcc :=_gcag ();_ggce ,_ :=_cagb ._agf .ReadByte ();if _ggce !='<'{return _fcc ,ErrBadCMapDict ;};_ggce ,_ =_cagb ._agf .ReadByte ();if _ggce !='<'{return _fcc ,ErrBadCMapDict ;};for {_cagb .skipSpaces ();_gcab ,_eaa :=_cagb ._agf .Peek (2);if _eaa !=nil {return _fcc ,_eaa ;
};if (_gcab [0]=='>')&&(_gcab [1]=='>'){_cagb ._agf .ReadByte ();_cagb ._agf .ReadByte ();break ;};_abfd ,_eaa :=_cagb .parseName ();_cd .Log .Trace ("\u004be\u0079\u003a\u0020\u0025\u0073",_abfd .Name );if _eaa !=nil {_cd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u0052\u0065\u0074\u0075\u0072\u006e\u0069\u006e\u0067\u0020\u006e\u0061\u006d\u0065\u002e\u0020\u0065\u0072r=\u0025\u0076",_eaa );
return _fcc ,_eaa ;};_cagb .skipSpaces ();_cba ,_eaa :=_cagb .parseObject ();if _eaa !=nil {return _fcc ,_eaa ;};_fcc .Dict [_abfd .Name ]=_cba ;_cagb .skipSpaces ();_gcab ,_eaa =_cagb ._agf .Peek (3);if _eaa !=nil {return _fcc ,_eaa ;};if string (_gcab )=="\u0064\u0065\u0066"{_cagb ._agf .Discard (3);
};};return _fcc ,nil ;};func (_daad *cMapParser )parseName ()(cmapName ,error ){_aeea :="";_beg :=false ;for {_bbf ,_ggc :=_daad ._agf .Peek (1);if _ggc ==_eg .EOF {break ;};if _ggc !=nil {return cmapName {_aeea },_ggc ;};if !_beg {if _bbf [0]=='/'{_beg =true ;
_daad ._agf .ReadByte ();}else {_cd .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u004e\u0061\u006d\u0065\u0020\u0073\u0074a\u0072t\u0069n\u0067 \u0077\u0069\u0074\u0068\u0020\u0025\u0073\u0020\u0028\u0025\u0020\u0078\u0029",_bbf ,_bbf );return cmapName {_aeea },_f .Errorf ("\u0069n\u0076a\u006c\u0069\u0064\u0020\u006ea\u006d\u0065:\u0020\u0028\u0025\u0063\u0029",_bbf [0]);
};}else {if _a .IsWhiteSpace (_bbf [0]){break ;}else if (_bbf [0]=='/')||(_bbf [0]=='[')||(_bbf [0]=='(')||(_bbf [0]==']')||(_bbf [0]=='<')||(_bbf [0]=='>'){break ;}else if _bbf [0]=='#'{_gedg ,_caef :=_daad ._agf .Peek (3);if _caef !=nil {return cmapName {_aeea },_caef ;
};_daad ._agf .Discard (3);_fgge ,_caef :=_e .DecodeString (string (_gedg [1:3]));if _caef !=nil {return cmapName {_aeea },_caef ;};_aeea +=string (_fgge );}else {_ffe ,_ :=_daad ._agf .ReadByte ();_aeea +=string (_ffe );};};};return cmapName {_aeea },nil ;
};func _gcag ()cmapDict {return cmapDict {Dict :map[string ]cmapObject {}}};func (cmap *CMap )computeInverseMappings (){for _bgb ,_ddd :=range cmap ._gd {if _aec ,_ddg :=cmap ._aab [_ddd ];!_ddg ||(_ddg &&_aec > _bgb ){cmap ._aab [_ddd ]=_bgb ;};};for _abg ,_bff :=range cmap ._ae {if _gdf ,_fdb :=cmap ._aed [_bff ];
!_fdb ||(_fdb &&_gdf > _abg ){cmap ._aed [_bff ]=_abg ;};};_ba .Slice (cmap ._egg ,func (_fg ,_dgd int )bool {return cmap ._egg [_fg ].Low < cmap ._egg [_dgd ].Low });};func (cmap *CMap )toBfData ()string {if len (cmap ._ae )==0{return "";};_ggd :=make ([]CharCode ,0,len (cmap ._ae ));
for _bad :=range cmap ._ae {_ggd =append (_ggd ,_bad );};_ba .Slice (_ggd ,func (_edaa ,_cfe int )bool {return _ggd [_edaa ]< _ggd [_cfe ]});var _gbc []charRange ;_dbd :=charRange {_ggd [0],_ggd [0]};_fabd :=cmap ._ae [_ggd [0]];for _ ,_ega :=range _ggd [1:]{_ebdd :=cmap ._ae [_ega ];
if _ega ==_dbd ._cda +1&&_efee (_ebdd )==_efee (_fabd )+1{_dbd ._cda =_ega ;}else {_gbc =append (_gbc ,_dbd );_dbd ._d ,_dbd ._cda =_ega ,_ega ;};_fabd =_ebdd ;};_gbc =append (_gbc ,_dbd );var _bffg []CharCode ;var _ce []fbRange ;for _ ,_gbcd :=range _gbc {if _gbcd ._d ==_gbcd ._cda {_bffg =append (_bffg ,_gbcd ._d );
}else {_ce =append (_ce ,fbRange {_ec :_gbcd ._d ,_fd :_gbcd ._cda ,_cg :cmap ._ae [_gbcd ._d ]});};};_cd .Log .Trace ("\u0063\u0068ar\u0052\u0061\u006eg\u0065\u0073\u003d\u0025d f\u0062Ch\u0061\u0072\u0073\u003d\u0025\u0064\u0020fb\u0052\u0061\u006e\u0067\u0065\u0073\u003d%\u0064",len (_gbc ),len (_bffg ),len (_ce ));
var _caf []string ;if len (_bffg )> 0{_fdfe :=(len (_bffg )+_eaeg -1)/_eaeg ;for _cac :=0;_cac < _fdfe ;_cac ++{_fbg :=_efgf (len (_bffg )-_cac *_eaeg ,_eaeg );_caf =append (_caf ,_f .Sprintf ("\u0025\u0064\u0020\u0062\u0065\u0067\u0069\u006e\u0062f\u0063\u0068\u0061\u0072",_fbg ));
for _gdd :=0;_gdd < _fbg ;_gdd ++{_cef :=_bffg [_cac *_eaeg +_gdd ];_ggec :=cmap ._ae [_cef ];_caf =append (_caf ,_f .Sprintf ("\u003c%\u0030\u0034\u0078\u003e\u0020\u0025s",_cef ,_fdg (_ggec )));};_caf =append (_caf ,"\u0065n\u0064\u0062\u0066\u0063\u0068\u0061r");
};};if len (_ce )> 0{_bag :=(len (_ce )+_eaeg -1)/_eaeg ;for _fce :=0;_fce < _bag ;_fce ++{_agd :=_efgf (len (_ce )-_fce *_eaeg ,_eaeg );_caf =append (_caf ,_f .Sprintf ("\u0025d\u0020b\u0065\u0067\u0069\u006e\u0062\u0066\u0072\u0061\u006e\u0067\u0065",_agd ));
for _cacc :=0;_cacc < _agd ;_cacc ++{_cefc :=_ce [_fce *_eaeg +_cacc ];_caf =append (_caf ,_f .Sprintf ("\u003c%\u00304\u0078\u003e\u003c\u0025\u0030\u0034\u0078\u003e\u0020\u0025\u0073",_cefc ._ec ,_cefc ._fd ,_fdg (_cefc ._cg )));};_caf =append (_caf ,"\u0065\u006e\u0064\u0062\u0066\u0072\u0061\u006e\u0067\u0065");
};};return _be .Join (_caf ,"\u000a");};func (cmap *CMap )CharcodeBytesToUnicode (data []byte )(string ,int ){_eaef ,_ac :=cmap .BytesToCharcodes (data );if !_ac {_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0043\u0068\u0061\u0072\u0063\u006f\u0064\u0065\u0042\u0079\u0074\u0065s\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069n\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u002e\u0020\u0064\u0061\u0074\u0061\u003d\u005b\u0025\u0020\u0030\u0032\u0078]\u0020\u0063\u006d\u0061\u0070=\u0025\u0073",data ,cmap );
return "",0;};_aad :=make ([]string ,len (_eaef ));var _gc []CharCode ;for _cgf ,_fe :=range _eaef {_ed ,_ddc :=cmap ._ae [_fe ];if !_ddc {_gc =append (_gc ,_fe );_ed =MissingCodeString ;};_aad [_cgf ]=_ed ;};_eeb :=_be .Join (_aad ,"");if len (_gc )> 0{_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020C\u0068\u0061\u0072c\u006f\u0064\u0065\u0042y\u0074\u0065\u0073\u0054\u006f\u0055\u006e\u0069\u0063\u006f\u0064\u0065\u002e\u0020\u004e\u006f\u0074\u0020\u0069\u006e\u0020\u006d\u0061\u0070\u002e\u000a"+"\u0009d\u0061t\u0061\u003d\u005b\u0025\u00200\u0032\u0078]\u003d\u0025\u0023\u0071\u000a"+"\u0009\u0063h\u0061\u0072\u0063o\u0064\u0065\u0073\u003d\u0025\u0030\u0032\u0078\u000a"+"\u0009\u006d\u0069\u0073\u0073\u0069\u006e\u0067\u003d\u0025\u0064\u0020%\u0030\u0032\u0078\u000a"+"\u0009\u0075\u006e\u0069\u0063\u006f\u0064\u0065\u003d`\u0025\u0073\u0060\u000a"+"\u0009\u0063\u006d\u0061\u0070\u003d\u0025\u0073",data ,string (data ),_eaef ,len (_gc ),_gc ,_eeb ,cmap );
};return _eeb ,len (_gc );};func (cmap *CMap )parseCodespaceRange ()error {for {_fea ,_fgg :=cmap .parseObject ();if _fgg !=nil {if _fgg ==_eg .EOF {break ;};return _fgg ;};_aabd ,_abb :=_fea .(cmapHexString );if !_abb {if _ggee ,_efb :=_fea .(cmapOperand );
_efb {if _ggee .Operand ==_cbff {return nil ;};return _cf .New ("\u0075n\u0065x\u0070\u0065\u0063\u0074\u0065d\u0020\u006fp\u0065\u0072\u0061\u006e\u0064");};};_fea ,_fgg =cmap .parseObject ();if _fgg !=nil {if _fgg ==_eg .EOF {break ;};return _fgg ;};
_feb ,_abb :=_fea .(cmapHexString );if !_abb {return _cf .New ("\u006e\u006f\u006e-\u0068\u0065\u0078\u0020\u0068\u0069\u0067\u0068");};if len (_aabd ._egd )!=len (_feb ._egd ){return _cf .New ("\u0075\u006e\u0065\u0071\u0075\u0061\u006c\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066 \u0062\u0079\u0074\u0065\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065");
};_gfc :=_eaf (_aabd );_gcbd :=_eaf (_feb );if _gcbd < _gfc {_cd .Log .Debug ("\u0045R\u0052\u004fR\u003a\u0020\u0042\u0061d\u0020\u0063\u006fd\u0065\u0073\u0070\u0061\u0063\u0065\u002e\u0020\u006cow\u003d\u0030\u0078%\u0030\u0032x\u0020\u0068\u0069\u0067\u0068\u003d0\u0078\u00250\u0032\u0078",_gfc ,_gcbd );
return ErrBadCMap ;};_acc :=_feb ._fdbe ;_acce :=Codespace {NumBytes :_acc ,Low :_gfc ,High :_gcbd };cmap ._egg =append (cmap ._egg ,_acce );_cd .Log .Trace ("\u0043\u006f\u0064e\u0073\u0070\u0061\u0063e\u0020\u006c\u006f\u0077\u003a\u0020\u0030x\u0025\u0058\u002c\u0020\u0068\u0069\u0067\u0068\u003a\u0020\u0030\u0078\u0025\u0058",_gfc ,_gcbd );
};if len (cmap ._egg )==0{_cd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0073\u0070\u0061\u0063\u0065\u0073\u0020\u0069\u006e\u0020\u0063ma\u0070\u002e");return ErrBadCMap ;};return nil ;};type CharCode uint32 ;
type CMap struct{*cMapParser ;_df string ;_dd int ;_bb int ;_bg string ;_bab string ;_cb CIDSystemInfo ;_egg []Codespace ;_gd map[CharCode ]CharCode ;_aab map[CharCode ]CharCode ;_ae map[CharCode ]string ;_aed map[string ]CharCode ;_aeg []byte ;_dg *_a .PdfObjectStream ;
_fc integer ;};type cmapHexString struct{_fdbe int ;_egd []byte ;};func (cmap *CMap )parse ()error {var _gaaa cmapObject ;for {_eddf ,_badf :=cmap .parseObject ();if _badf !=nil {if _badf ==_eg .EOF {break ;};_cd .Log .Debug ("\u0045\u0052\u0052OR\u003a\u0020\u0070\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0043\u004d\u0061\u0070\u003a\u0020\u0025\u0076",_badf );
return _badf ;};switch _ebe :=_eddf .(type ){case cmapOperand :_eba :=_ebe ;switch _eba .Operand {case _accef :_cbfg :=cmap .parseCodespaceRange ();if _cbfg !=nil {return _cbfg ;};case _gae :_cee :=cmap .parseCIDRange ();if _cee !=nil {return _cee ;};case _baad :_bcd :=cmap .parseBfchar ();
if _bcd !=nil {return _bcd ;};case _eggb :_bgf :=cmap .parseBfrange ();if _bgf !=nil {return _bgf ;};case _aadb :if _gaaa ==nil {_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0075\u0073\u0065\u0063m\u0061\u0070\u0020\u0077\u0069\u0074\u0068\u0020\u006e\u006f \u0061\u0072\u0067");
return ErrBadCMap ;};_efd ,_cbd :=_gaaa .(cmapName );if !_cbd {_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a \u0075\u0073\u0065\u0063\u006d\u0061\u0070\u0020\u0061\u0072\u0067\u0020\u006eo\u0074\u0020\u0061\u0020\u006e\u0061\u006de\u0020\u0025\u0023\u0076",_gaaa );
return ErrBadCMap ;};cmap ._bab =_efd .Name ;case _gaf :_bbag :=cmap .parseSystemInfo ();if _bbag !=nil {return _bbag ;};};case cmapName :_agc :=_ebe ;switch _agc .Name {case _gaf :_dac :=cmap .parseSystemInfo ();if _dac !=nil {return _dac ;};case _abbg :_bge :=cmap .parseName ();
if _bge !=nil {return _bge ;};case _ccg :_egb :=cmap .parseType ();if _egb !=nil {return _egb ;};case _ceg :_fcg :=cmap .parseVersion ();if _fcg !=nil {return _fcg ;};case _egea :if _badf =cmap .parseWMode ();_badf !=nil {return _badf ;};};};_gaaa =_eddf ;
};return nil ;};func (cmap *CMap )CIDToCharcode (cid CharCode )(CharCode ,bool ){_ddgg ,_bba :=cmap ._aab [cid ];return _ddgg ,_bba ;};type cmapFloat struct{_dacb float64 };type cmapInt struct{_fegd int64 };func (cmap *CMap )BytesToCharcodes (data []byte )([]CharCode ,bool ){var _gcb []CharCode ;
if cmap ._dd ==8{for _ ,_cdag :=range data {_gcb =append (_gcb ,CharCode (_cdag ));};return _gcb ,true ;};for _fdc :=0;_fdc < len (data );{_gf ,_fb ,_edg :=cmap .matchCode (data [_fdc :]);if !_edg {_cd .Log .Debug ("\u0045\u0052R\u004f\u0052\u003a\u0020\u004e\u006f\u0020\u0063\u006f\u0064\u0065\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0074\u0020\u0069\u003d\u0025\u0064\u0020\u0062\u0079\u0074\u0065\u0073\u003d\u005b\u0025\u0020\u0030\u0032\u0078\u005d\u003d\u0025\u0023\u0071",_fdc ,data ,string (data ));
return _gcb ,false ;};_gcb =append (_gcb ,_gf );_fdc +=_fb ;};return _gcb ,true ;};type integer struct{_gfca bool ;_cdecd int ;};func (_agcf *cMapParser )parseHexString ()(cmapHexString ,error ){_agcf ._agf .ReadByte ();_abf :=[]byte ("\u0030\u0031\u0032\u003345\u0036\u0037\u0038\u0039\u0061\u0062\u0063\u0064\u0065\u0066\u0041\u0042\u0043\u0044E\u0046");
_egc :=_ea .Buffer {};for {_agcf .skipSpaces ();_cddf ,_bga :=_agcf ._agf .Peek (1);if _bga !=nil {return cmapHexString {},_bga ;};if _cddf [0]=='>'{_agcf ._agf .ReadByte ();break ;};_efbg ,_ :=_agcf ._agf .ReadByte ();if _ea .IndexByte (_abf ,_efbg )>=0{_egc .WriteByte (_efbg );
};};if _egc .Len ()%2==1{_cd .Log .Debug ("\u0070\u0061rs\u0065\u0048\u0065x\u0053\u0074\u0072\u0069ng:\u0020ap\u0070\u0065\u006e\u0064\u0069\u006e\u0067 '\u0030\u0027\u0020\u0074\u006f\u0020\u0025#\u0071",_egc .String ());_egc .WriteByte ('0');};_decg :=_egc .Len ()/2;
_cdaa ,_ :=_e .DecodeString (_egc .String ());return cmapHexString {_fdbe :_decg ,_egd :_cdaa },nil ;};func NewCIDSystemInfo (obj _a .PdfObject )(_bd CIDSystemInfo ,_gg error ){_efg ,_ecf :=_a .GetDict (obj );if !_ecf {return CIDSystemInfo {},_a .ErrTypeError ;
};_ee ,_ecf :=_a .GetStringVal (_efg .Get ("\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"));if !_ecf {return CIDSystemInfo {},_a .ErrTypeError ;};_bac ,_ecf :=_a .GetStringVal (_efg .Get ("\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"));if !_ecf {return CIDSystemInfo {},_a .ErrTypeError ;
};_de ,_ecf :=_a .GetIntVal (_efg .Get ("\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"));if !_ecf {return CIDSystemInfo {},_a .ErrTypeError ;};return CIDSystemInfo {Registry :_ee ,Ordering :_bac ,Supplement :_de },nil ;};func (cmap *CMap )parseWMode ()error {var _ff int ;
_fgc :=false ;for _caa :=0;_caa < 3&&!_fgc ;_caa ++{_eefd ,_aegdg :=cmap .parseObject ();if _aegdg !=nil {return _aegdg ;};switch _bcf :=_eefd .(type ){case cmapOperand :switch _bcf .Operand {case "\u0064\u0065\u0066":_fgc =true ;default:_cd .Log .Error ("\u0070\u0061\u0072\u0073\u0065\u0057\u004d\u006f\u0064\u0065:\u0020\u0073\u0074\u0061\u0074\u0065\u0020e\u0072\u0072\u006f\u0072\u002e\u0020\u006f\u003d\u0025\u0023\u0076",_eefd );
return ErrBadCMap ;};case cmapInt :_ff =int (_bcf ._fegd );};};cmap ._fc =integer {_gfca :true ,_cdecd :_ff };return nil ;};func IsPredefinedCMap (name string )bool {return _fa .AssetExists (name )};func (cmap *CMap )Bytes ()[]byte {_cd .Log .Trace ("\u0063\u006d\u0061\u0070.B\u0079\u0074\u0065\u0073\u003a\u0020\u0063\u006d\u0061\u0070\u003d\u0025\u0073",cmap .String ());
if len (cmap ._aeg )> 0{return cmap ._aeg ;};cmap ._aeg =[]byte (_be .Join ([]string {_fcb ,cmap .toBfData (),_faa },"\u000a"));return cmap ._aeg ;};func _ggcg (_ada cmapHexString )rune {_abfg :=_cdad (_ada );if _ccdb :=len (_abfg );_ccdb ==0{_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054o\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065c\u0074\u0065\u0064\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0072u\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023\u0076",_ada );
return MissingCodeRune ;};if len (_abfg )> 1{_cd .Log .Debug ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0068\u0065\u0078\u0054\u006f\u0052\u0075\u006e\u0065\u002e\u0020\u0045\u0078p\u0065\u0063\u0074\u0065\u0064\u0020\u0065\u0078\u0061\u0063\u0074\u006c\u0079\u0020\u006f\u006e\u0065\u0020\u0072\u0075\u006e\u0065\u0020\u0073\u0068\u0065\u0078\u003d\u0025\u0023v\u0020\u002d\u003e\u0020\u0025#\u0076",_ada ,_abfg );
};return _abfg [0];};type cmapName struct{Name string ;};func LoadPredefinedCMap (name string )(*CMap ,error ){cmap ,_cgg :=_eae (name );if _cgg !=nil {return nil ,_cgg ;};if cmap ._bab ==""{cmap .computeInverseMappings ();return cmap ,nil ;};_af ,_cgg :=_eae (cmap ._bab );
if _cgg !=nil {return nil ,_cgg ;};for _ggb ,_ebd :=range _af ._gd {if _ ,_ggf :=cmap ._gd [_ggb ];!_ggf {cmap ._gd [_ggb ]=_ebd ;};};cmap ._egg =append (cmap ._egg ,_af ._egg ...);cmap .computeInverseMappings ();return cmap ,nil ;};func (cmap *CMap )parseSystemInfo ()error {_edc :=false ;
_daa :=false ;_gab :="";_ged :=false ;_afd :=CIDSystemInfo {};for _adf :=0;_adf < 50&&!_ged ;_adf ++{_bffa ,_dae :=cmap .parseObject ();if _dae !=nil {return _dae ;};switch _ded :=_bffa .(type ){case cmapDict :_baa :=_ded .Dict ;_fca ,_afc :=_baa ["\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079"];
if !_afc {_cd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_ffg ,_afc :=_fca .(cmapString );if !_afc {_cd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_afd .Registry =_ffg .String ;_fca ,_afc =_baa ["\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067"];if !_afc {_cd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");
return ErrBadCMap ;};_ffg ,_afc =_fca .(cmapString );if !_afc {_cd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_afd .Ordering =_ffg .String ;
_cgcdc ,_afc :=_baa ["\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074"];if !_afc {_cd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;
};_dfd ,_afc :=_cgcdc .(cmapInt );if !_afc {_cd .Log .Debug ("\u0045\u0052\u0052\u004fR:\u0020\u0042\u0061\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006ef\u006f");return ErrBadCMap ;};_afd .Supplement =int (_dfd ._fegd );_ged =true ;
case cmapOperand :switch _ded .Operand {case "\u0062\u0065\u0067i\u006e":_edc =true ;case "\u0065\u006e\u0064":_ged =true ;case "\u0064\u0065\u0066":_daa =false ;};case cmapName :if _edc {_gab =_ded .Name ;_daa =true ;};case cmapString :if _daa {switch _gab {case "\u0052\u0065\u0067\u0069\u0073\u0074\u0072\u0079":_afd .Registry =_ded .String ;
case "\u004f\u0072\u0064\u0065\u0072\u0069\u006e\u0067":_afd .Ordering =_ded .String ;};};case cmapInt :if _daa {switch _gab {case "\u0053\u0075\u0070\u0070\u006c\u0065\u006d\u0065\u006e\u0074":_afd .Supplement =int (_ded ._fegd );};};};};if !_ged {_cd .Log .Debug ("\u0045\u0052\u0052O\u0052\u003a\u0020\u0050\u0061\u0072\u0073\u0065\u0064\u0020\u0053\u0079\u0073\u0074\u0065\u006d\u0020\u0049\u006e\u0066\u006f\u0020\u0064\u0069\u0063\u0074\u0020\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u006c\u0079");
return ErrBadCMap ;};cmap ._cb =_afd ;return nil ;};func (_ecad *cMapParser )parseArray ()(cmapArray ,error ){_ddff :=cmapArray {};_ddff .Array =[]cmapObject {};_ecad ._agf .ReadByte ();for {_ecad .skipSpaces ();_ccb ,_ccce :=_ecad ._agf .Peek (1);if _ccce !=nil {return _ddff ,_ccce ;
};if _ccb [0]==']'{_ecad ._agf .ReadByte ();break ;};_ccbd ,_ccce :=_ecad .parseObject ();if _ccce !=nil {return _ddff ,_ccce ;};_ddff .Array =append (_ddff .Array ,_ccbd );};return _ddff ,nil ;};func (cmap *CMap )StringToCID (s string )(CharCode ,bool ){_ad ,_db :=cmap ._aed [s ];
return _ad ,_db };